//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/n4hum/OneDrive/Escritorio/Codigo-MainDir/C#/ProyectoCompi/MiniCSharp/MiniCSharp/MiniCSLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated.parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniCSLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, WHILE=5, FOR=6, RETURN=7, BREAK=8, READ=9, 
		WRITE=10, NEW=11, TRUE=12, FALSE=13, BL=14, BR=15, COMMA=16, LEFTP=17, 
		RIGHTP=18, SBL=19, SBR=20, ASSIGN=21, ADD=22, SUB=23, OR=24, AND=25, BAR=26, 
		SEMICOLON=27, DOT=28, PLUS=29, EQEQ=30, NOTEQ=31, LESS=32, GREATER=33, 
		LESSEQ=34, GREATEREQ=35, MULT=36, DIV=37, MOD=38, NUMLIT=39, FLOATLIT=40, 
		CHARLIT=41, STRINGLIT=42, ID=43, LINE_COMMENT=44, WS=45;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"CLASS", "VOID", "IF", "ELSE", "WHILE", "FOR", "RETURN", "BREAK", "READ", 
		"WRITE", "NEW", "TRUE", "FALSE", "BL", "BR", "COMMA", "LEFTP", "RIGHTP", 
		"SBL", "SBR", "ASSIGN", "ADD", "SUB", "OR", "AND", "BAR", "SEMICOLON", 
		"DOT", "PLUS", "EQEQ", "NOTEQ", "LESS", "GREATER", "LESSEQ", "GREATEREQ", 
		"MULT", "DIV", "MOD", "NUMLIT", "FLOATLIT", "CHARLIT", "STRINGLIT", "ID", 
		"ESC_SEQ", "LETTER", "DIGIT", "LINE_COMMENT", "WS"
	};


	public MiniCSLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniCSLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'while'", "'for'", "'return'", 
		"'break'", "'read'", "'write'", "'new'", "'true'", "'false'", "'{'", "'}'", 
		"','", "'('", "')'", "'['", "']'", "'='", "'++'", "'--'", "'||'", "'&&'", 
		"'-'", "';'", "'.'", "'+'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", 
		"'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "WHILE", "FOR", "RETURN", "BREAK", 
		"READ", "WRITE", "NEW", "TRUE", "FALSE", "BL", "BR", "COMMA", "LEFTP", 
		"RIGHTP", "SBL", "SBR", "ASSIGN", "ADD", "SUB", "OR", "AND", "BAR", "SEMICOLON", 
		"DOT", "PLUS", "EQEQ", "NOTEQ", "LESS", "GREATER", "LESSEQ", "GREATEREQ", 
		"MULT", "DIV", "MOD", "NUMLIT", "FLOATLIT", "CHARLIT", "STRINGLIT", "ID", 
		"LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,45,300,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,0,
		1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
		4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
		1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
		1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
		1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
		1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
		1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,
		1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,
		1,38,1,38,5,38,226,8,38,10,38,12,38,229,9,38,1,39,4,39,232,8,39,11,39,
		12,39,233,1,39,1,39,4,39,238,8,39,11,39,12,39,239,1,40,1,40,1,40,3,40,
		245,8,40,1,40,1,40,1,41,1,41,1,41,5,41,252,8,41,10,41,12,41,255,9,41,1,
		41,1,41,1,42,1,42,3,42,261,8,42,1,42,1,42,1,42,5,42,266,8,42,10,42,12,
		42,269,9,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,46,5,46,
		282,8,46,10,46,12,46,285,9,46,1,46,3,46,288,8,46,1,46,1,46,1,46,1,46,1,
		47,4,47,295,8,47,11,47,12,47,296,1,47,1,47,1,283,0,48,1,1,3,2,5,3,7,4,
		9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
		35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
		59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
		83,42,85,43,87,0,89,0,91,0,93,44,95,45,1,0,4,2,0,34,34,92,92,8,0,34,34,
		39,39,92,92,98,98,102,102,110,110,114,114,116,116,2,0,65,90,97,122,3,0,
		9,10,13,13,32,32,309,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
		31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
		0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
		0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
		0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
		1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,1,0,0,0,3,103,1,0,0,0,5,108,1,0,
		0,0,7,111,1,0,0,0,9,116,1,0,0,0,11,122,1,0,0,0,13,126,1,0,0,0,15,133,1,
		0,0,0,17,139,1,0,0,0,19,144,1,0,0,0,21,150,1,0,0,0,23,154,1,0,0,0,25,159,
		1,0,0,0,27,165,1,0,0,0,29,167,1,0,0,0,31,169,1,0,0,0,33,171,1,0,0,0,35,
		173,1,0,0,0,37,175,1,0,0,0,39,177,1,0,0,0,41,179,1,0,0,0,43,181,1,0,0,
		0,45,184,1,0,0,0,47,187,1,0,0,0,49,190,1,0,0,0,51,193,1,0,0,0,53,195,1,
		0,0,0,55,197,1,0,0,0,57,199,1,0,0,0,59,201,1,0,0,0,61,204,1,0,0,0,63,207,
		1,0,0,0,65,209,1,0,0,0,67,211,1,0,0,0,69,214,1,0,0,0,71,217,1,0,0,0,73,
		219,1,0,0,0,75,221,1,0,0,0,77,223,1,0,0,0,79,231,1,0,0,0,81,241,1,0,0,
		0,83,248,1,0,0,0,85,260,1,0,0,0,87,270,1,0,0,0,89,273,1,0,0,0,91,275,1,
		0,0,0,93,277,1,0,0,0,95,294,1,0,0,0,97,98,5,99,0,0,98,99,5,108,0,0,99,
		100,5,97,0,0,100,101,5,115,0,0,101,102,5,115,0,0,102,2,1,0,0,0,103,104,
		5,118,0,0,104,105,5,111,0,0,105,106,5,105,0,0,106,107,5,100,0,0,107,4,
		1,0,0,0,108,109,5,105,0,0,109,110,5,102,0,0,110,6,1,0,0,0,111,112,5,101,
		0,0,112,113,5,108,0,0,113,114,5,115,0,0,114,115,5,101,0,0,115,8,1,0,0,
		0,116,117,5,119,0,0,117,118,5,104,0,0,118,119,5,105,0,0,119,120,5,108,
		0,0,120,121,5,101,0,0,121,10,1,0,0,0,122,123,5,102,0,0,123,124,5,111,0,
		0,124,125,5,114,0,0,125,12,1,0,0,0,126,127,5,114,0,0,127,128,5,101,0,0,
		128,129,5,116,0,0,129,130,5,117,0,0,130,131,5,114,0,0,131,132,5,110,0,
		0,132,14,1,0,0,0,133,134,5,98,0,0,134,135,5,114,0,0,135,136,5,101,0,0,
		136,137,5,97,0,0,137,138,5,107,0,0,138,16,1,0,0,0,139,140,5,114,0,0,140,
		141,5,101,0,0,141,142,5,97,0,0,142,143,5,100,0,0,143,18,1,0,0,0,144,145,
		5,119,0,0,145,146,5,114,0,0,146,147,5,105,0,0,147,148,5,116,0,0,148,149,
		5,101,0,0,149,20,1,0,0,0,150,151,5,110,0,0,151,152,5,101,0,0,152,153,5,
		119,0,0,153,22,1,0,0,0,154,155,5,116,0,0,155,156,5,114,0,0,156,157,5,117,
		0,0,157,158,5,101,0,0,158,24,1,0,0,0,159,160,5,102,0,0,160,161,5,97,0,
		0,161,162,5,108,0,0,162,163,5,115,0,0,163,164,5,101,0,0,164,26,1,0,0,0,
		165,166,5,123,0,0,166,28,1,0,0,0,167,168,5,125,0,0,168,30,1,0,0,0,169,
		170,5,44,0,0,170,32,1,0,0,0,171,172,5,40,0,0,172,34,1,0,0,0,173,174,5,
		41,0,0,174,36,1,0,0,0,175,176,5,91,0,0,176,38,1,0,0,0,177,178,5,93,0,0,
		178,40,1,0,0,0,179,180,5,61,0,0,180,42,1,0,0,0,181,182,5,43,0,0,182,183,
		5,43,0,0,183,44,1,0,0,0,184,185,5,45,0,0,185,186,5,45,0,0,186,46,1,0,0,
		0,187,188,5,124,0,0,188,189,5,124,0,0,189,48,1,0,0,0,190,191,5,38,0,0,
		191,192,5,38,0,0,192,50,1,0,0,0,193,194,5,45,0,0,194,52,1,0,0,0,195,196,
		5,59,0,0,196,54,1,0,0,0,197,198,5,46,0,0,198,56,1,0,0,0,199,200,5,43,0,
		0,200,58,1,0,0,0,201,202,5,61,0,0,202,203,5,61,0,0,203,60,1,0,0,0,204,
		205,5,33,0,0,205,206,5,61,0,0,206,62,1,0,0,0,207,208,5,60,0,0,208,64,1,
		0,0,0,209,210,5,62,0,0,210,66,1,0,0,0,211,212,5,60,0,0,212,213,5,61,0,
		0,213,68,1,0,0,0,214,215,5,62,0,0,215,216,5,61,0,0,216,70,1,0,0,0,217,
		218,5,42,0,0,218,72,1,0,0,0,219,220,5,47,0,0,220,74,1,0,0,0,221,222,5,
		37,0,0,222,76,1,0,0,0,223,227,3,91,45,0,224,226,3,91,45,0,225,224,1,0,
		0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,78,1,0,0,0,229,
		227,1,0,0,0,230,232,3,91,45,0,231,230,1,0,0,0,232,233,1,0,0,0,233,231,
		1,0,0,0,233,234,1,0,0,0,234,235,1,0,0,0,235,237,5,46,0,0,236,238,3,91,
		45,0,237,236,1,0,0,0,238,239,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,
		80,1,0,0,0,241,244,5,39,0,0,242,245,3,87,43,0,243,245,9,0,0,0,244,242,
		1,0,0,0,244,243,1,0,0,0,245,246,1,0,0,0,246,247,5,39,0,0,247,82,1,0,0,
		0,248,253,5,34,0,0,249,252,3,87,43,0,250,252,8,0,0,0,251,249,1,0,0,0,251,
		250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,256,1,
		0,0,0,255,253,1,0,0,0,256,257,5,34,0,0,257,84,1,0,0,0,258,261,5,95,0,0,
		259,261,3,89,44,0,260,258,1,0,0,0,260,259,1,0,0,0,261,267,1,0,0,0,262,
		266,3,89,44,0,263,266,3,91,45,0,264,266,5,46,0,0,265,262,1,0,0,0,265,263,
		1,0,0,0,265,264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,
		0,268,86,1,0,0,0,269,267,1,0,0,0,270,271,5,92,0,0,271,272,7,1,0,0,272,
		88,1,0,0,0,273,274,7,2,0,0,274,90,1,0,0,0,275,276,2,48,57,0,276,92,1,0,
		0,0,277,278,5,47,0,0,278,279,5,47,0,0,279,283,1,0,0,0,280,282,9,0,0,0,
		281,280,1,0,0,0,282,285,1,0,0,0,283,284,1,0,0,0,283,281,1,0,0,0,284,287,
		1,0,0,0,285,283,1,0,0,0,286,288,5,13,0,0,287,286,1,0,0,0,287,288,1,0,0,
		0,288,289,1,0,0,0,289,290,5,10,0,0,290,291,1,0,0,0,291,292,6,46,0,0,292,
		94,1,0,0,0,293,295,7,3,0,0,294,293,1,0,0,0,295,296,1,0,0,0,296,294,1,0,
		0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,6,47,0,0,299,96,1,0,0,0,13,
		0,227,233,239,244,251,253,260,265,267,283,287,296,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace generated.parser
