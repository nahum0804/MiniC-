//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/n4hum/OneDrive/Escritorio/Codigo-MainDir/C#/ProyectoCompi/MiniCSharp/MiniCSharp/MiniCSLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated.parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniCSLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, WHILE=5, FOR=6, RETURN=7, BREAK=8, READ=9, 
		WRITE=10, SWITCH=11, USING=12, DEFAULT=13, CASE=14, LIST=15, NEW=16, TRUE=17, 
		FALSE=18, BL=19, BR=20, COMMA=21, LEFTP=22, RIGHTP=23, SBL=24, SBR=25, 
		ASSIGN=26, ADD=27, SUB=28, OR=29, AND=30, BAR=31, SEMICOLON=32, DOT=33, 
		PLUS=34, EQEQ=35, NOTEQ=36, LESS=37, GREATER=38, LESSEQ=39, GREATEREQ=40, 
		MULT=41, DIV=42, MOD=43, DOTS=44, NUMLIT=45, FLOATLIT=46, CHARLIT=47, 
		STRINGLIT=48, ID=49, LINE_COMMENT=50, WS=51;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"CLASS", "VOID", "IF", "ELSE", "WHILE", "FOR", "RETURN", "BREAK", "READ", 
		"WRITE", "SWITCH", "USING", "DEFAULT", "CASE", "LIST", "NEW", "TRUE", 
		"FALSE", "BL", "BR", "COMMA", "LEFTP", "RIGHTP", "SBL", "SBR", "ASSIGN", 
		"ADD", "SUB", "OR", "AND", "BAR", "SEMICOLON", "DOT", "PLUS", "EQEQ", 
		"NOTEQ", "LESS", "GREATER", "LESSEQ", "GREATEREQ", "MULT", "DIV", "MOD", 
		"DOTS", "NUMLIT", "FLOATLIT", "CHARLIT", "STRINGLIT", "ID", "ESC_SEQ", 
		"LETTER", "DIGIT", "LINE_COMMENT", "WS"
	};


	public MiniCSLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniCSLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'while'", "'for'", "'return'", 
		"'break'", "'read'", "'write'", "'switch'", "'using'", "'default'", "'case'", 
		"'List'", "'new'", "'true'", "'false'", "'{'", "'}'", "','", "'('", "')'", 
		"'['", "']'", "'='", "'++'", "'--'", "'||'", "'&&'", "'-'", "';'", "'.'", 
		"'+'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'*'", "'/'", "'%'", 
		"':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "WHILE", "FOR", "RETURN", "BREAK", 
		"READ", "WRITE", "SWITCH", "USING", "DEFAULT", "CASE", "LIST", "NEW", 
		"TRUE", "FALSE", "BL", "BR", "COMMA", "LEFTP", "RIGHTP", "SBL", "SBR", 
		"ASSIGN", "ADD", "SUB", "OR", "AND", "BAR", "SEMICOLON", "DOT", "PLUS", 
		"EQEQ", "NOTEQ", "LESS", "GREATER", "LESSEQ", "GREATEREQ", "MULT", "DIV", 
		"MOD", "DOTS", "NUMLIT", "FLOATLIT", "CHARLIT", "STRINGLIT", "ID", "LINE_COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,51,345,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,0,1,0,1,0,1,0,1,
		1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
		1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
		7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
		1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
		1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
		1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,
		1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,
		1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,
		1,42,1,43,1,43,1,44,1,44,5,44,271,8,44,10,44,12,44,274,9,44,1,45,4,45,
		277,8,45,11,45,12,45,278,1,45,1,45,4,45,283,8,45,11,45,12,45,284,1,46,
		1,46,1,46,3,46,290,8,46,1,46,1,46,1,47,1,47,1,47,5,47,297,8,47,10,47,12,
		47,300,9,47,1,47,1,47,1,48,1,48,3,48,306,8,48,1,48,1,48,1,48,5,48,311,
		8,48,10,48,12,48,314,9,48,1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,
		1,52,1,52,5,52,327,8,52,10,52,12,52,330,9,52,1,52,3,52,333,8,52,1,52,1,
		52,1,52,1,52,1,53,4,53,340,8,53,11,53,12,53,341,1,53,1,53,1,328,0,54,1,
		1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
		15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
		27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
		39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,0,101,
		0,103,0,105,50,107,51,1,0,4,2,0,34,34,92,92,8,0,34,34,39,39,92,92,98,98,
		102,102,110,110,114,114,116,116,2,0,65,90,97,122,3,0,9,10,13,13,32,32,
		354,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
		1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
		0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,105,
		1,0,0,0,0,107,1,0,0,0,1,109,1,0,0,0,3,115,1,0,0,0,5,120,1,0,0,0,7,123,
		1,0,0,0,9,128,1,0,0,0,11,134,1,0,0,0,13,138,1,0,0,0,15,145,1,0,0,0,17,
		151,1,0,0,0,19,156,1,0,0,0,21,162,1,0,0,0,23,169,1,0,0,0,25,175,1,0,0,
		0,27,183,1,0,0,0,29,188,1,0,0,0,31,193,1,0,0,0,33,197,1,0,0,0,35,202,1,
		0,0,0,37,208,1,0,0,0,39,210,1,0,0,0,41,212,1,0,0,0,43,214,1,0,0,0,45,216,
		1,0,0,0,47,218,1,0,0,0,49,220,1,0,0,0,51,222,1,0,0,0,53,224,1,0,0,0,55,
		227,1,0,0,0,57,230,1,0,0,0,59,233,1,0,0,0,61,236,1,0,0,0,63,238,1,0,0,
		0,65,240,1,0,0,0,67,242,1,0,0,0,69,244,1,0,0,0,71,247,1,0,0,0,73,250,1,
		0,0,0,75,252,1,0,0,0,77,254,1,0,0,0,79,257,1,0,0,0,81,260,1,0,0,0,83,262,
		1,0,0,0,85,264,1,0,0,0,87,266,1,0,0,0,89,268,1,0,0,0,91,276,1,0,0,0,93,
		286,1,0,0,0,95,293,1,0,0,0,97,305,1,0,0,0,99,315,1,0,0,0,101,318,1,0,0,
		0,103,320,1,0,0,0,105,322,1,0,0,0,107,339,1,0,0,0,109,110,5,99,0,0,110,
		111,5,108,0,0,111,112,5,97,0,0,112,113,5,115,0,0,113,114,5,115,0,0,114,
		2,1,0,0,0,115,116,5,118,0,0,116,117,5,111,0,0,117,118,5,105,0,0,118,119,
		5,100,0,0,119,4,1,0,0,0,120,121,5,105,0,0,121,122,5,102,0,0,122,6,1,0,
		0,0,123,124,5,101,0,0,124,125,5,108,0,0,125,126,5,115,0,0,126,127,5,101,
		0,0,127,8,1,0,0,0,128,129,5,119,0,0,129,130,5,104,0,0,130,131,5,105,0,
		0,131,132,5,108,0,0,132,133,5,101,0,0,133,10,1,0,0,0,134,135,5,102,0,0,
		135,136,5,111,0,0,136,137,5,114,0,0,137,12,1,0,0,0,138,139,5,114,0,0,139,
		140,5,101,0,0,140,141,5,116,0,0,141,142,5,117,0,0,142,143,5,114,0,0,143,
		144,5,110,0,0,144,14,1,0,0,0,145,146,5,98,0,0,146,147,5,114,0,0,147,148,
		5,101,0,0,148,149,5,97,0,0,149,150,5,107,0,0,150,16,1,0,0,0,151,152,5,
		114,0,0,152,153,5,101,0,0,153,154,5,97,0,0,154,155,5,100,0,0,155,18,1,
		0,0,0,156,157,5,119,0,0,157,158,5,114,0,0,158,159,5,105,0,0,159,160,5,
		116,0,0,160,161,5,101,0,0,161,20,1,0,0,0,162,163,5,115,0,0,163,164,5,119,
		0,0,164,165,5,105,0,0,165,166,5,116,0,0,166,167,5,99,0,0,167,168,5,104,
		0,0,168,22,1,0,0,0,169,170,5,117,0,0,170,171,5,115,0,0,171,172,5,105,0,
		0,172,173,5,110,0,0,173,174,5,103,0,0,174,24,1,0,0,0,175,176,5,100,0,0,
		176,177,5,101,0,0,177,178,5,102,0,0,178,179,5,97,0,0,179,180,5,117,0,0,
		180,181,5,108,0,0,181,182,5,116,0,0,182,26,1,0,0,0,183,184,5,99,0,0,184,
		185,5,97,0,0,185,186,5,115,0,0,186,187,5,101,0,0,187,28,1,0,0,0,188,189,
		5,76,0,0,189,190,5,105,0,0,190,191,5,115,0,0,191,192,5,116,0,0,192,30,
		1,0,0,0,193,194,5,110,0,0,194,195,5,101,0,0,195,196,5,119,0,0,196,32,1,
		0,0,0,197,198,5,116,0,0,198,199,5,114,0,0,199,200,5,117,0,0,200,201,5,
		101,0,0,201,34,1,0,0,0,202,203,5,102,0,0,203,204,5,97,0,0,204,205,5,108,
		0,0,205,206,5,115,0,0,206,207,5,101,0,0,207,36,1,0,0,0,208,209,5,123,0,
		0,209,38,1,0,0,0,210,211,5,125,0,0,211,40,1,0,0,0,212,213,5,44,0,0,213,
		42,1,0,0,0,214,215,5,40,0,0,215,44,1,0,0,0,216,217,5,41,0,0,217,46,1,0,
		0,0,218,219,5,91,0,0,219,48,1,0,0,0,220,221,5,93,0,0,221,50,1,0,0,0,222,
		223,5,61,0,0,223,52,1,0,0,0,224,225,5,43,0,0,225,226,5,43,0,0,226,54,1,
		0,0,0,227,228,5,45,0,0,228,229,5,45,0,0,229,56,1,0,0,0,230,231,5,124,0,
		0,231,232,5,124,0,0,232,58,1,0,0,0,233,234,5,38,0,0,234,235,5,38,0,0,235,
		60,1,0,0,0,236,237,5,45,0,0,237,62,1,0,0,0,238,239,5,59,0,0,239,64,1,0,
		0,0,240,241,5,46,0,0,241,66,1,0,0,0,242,243,5,43,0,0,243,68,1,0,0,0,244,
		245,5,61,0,0,245,246,5,61,0,0,246,70,1,0,0,0,247,248,5,33,0,0,248,249,
		5,61,0,0,249,72,1,0,0,0,250,251,5,60,0,0,251,74,1,0,0,0,252,253,5,62,0,
		0,253,76,1,0,0,0,254,255,5,60,0,0,255,256,5,61,0,0,256,78,1,0,0,0,257,
		258,5,62,0,0,258,259,5,61,0,0,259,80,1,0,0,0,260,261,5,42,0,0,261,82,1,
		0,0,0,262,263,5,47,0,0,263,84,1,0,0,0,264,265,5,37,0,0,265,86,1,0,0,0,
		266,267,5,58,0,0,267,88,1,0,0,0,268,272,3,103,51,0,269,271,3,103,51,0,
		270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,90,
		1,0,0,0,274,272,1,0,0,0,275,277,3,103,51,0,276,275,1,0,0,0,277,278,1,0,
		0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,280,1,0,0,0,280,282,5,46,0,0,281,
		283,3,103,51,0,282,281,1,0,0,0,283,284,1,0,0,0,284,282,1,0,0,0,284,285,
		1,0,0,0,285,92,1,0,0,0,286,289,5,39,0,0,287,290,3,99,49,0,288,290,9,0,
		0,0,289,287,1,0,0,0,289,288,1,0,0,0,290,291,1,0,0,0,291,292,5,39,0,0,292,
		94,1,0,0,0,293,298,5,34,0,0,294,297,3,99,49,0,295,297,8,0,0,0,296,294,
		1,0,0,0,296,295,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,
		0,299,301,1,0,0,0,300,298,1,0,0,0,301,302,5,34,0,0,302,96,1,0,0,0,303,
		306,5,95,0,0,304,306,3,101,50,0,305,303,1,0,0,0,305,304,1,0,0,0,306,312,
		1,0,0,0,307,311,3,101,50,0,308,311,3,103,51,0,309,311,5,46,0,0,310,307,
		1,0,0,0,310,308,1,0,0,0,310,309,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,
		0,312,313,1,0,0,0,313,98,1,0,0,0,314,312,1,0,0,0,315,316,5,92,0,0,316,
		317,7,1,0,0,317,100,1,0,0,0,318,319,7,2,0,0,319,102,1,0,0,0,320,321,2,
		48,57,0,321,104,1,0,0,0,322,323,5,47,0,0,323,324,5,47,0,0,324,328,1,0,
		0,0,325,327,9,0,0,0,326,325,1,0,0,0,327,330,1,0,0,0,328,329,1,0,0,0,328,
		326,1,0,0,0,329,332,1,0,0,0,330,328,1,0,0,0,331,333,5,13,0,0,332,331,1,
		0,0,0,332,333,1,0,0,0,333,334,1,0,0,0,334,335,5,10,0,0,335,336,1,0,0,0,
		336,337,6,52,0,0,337,106,1,0,0,0,338,340,7,3,0,0,339,338,1,0,0,0,340,341,
		1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,344,6,53,0,
		0,344,108,1,0,0,0,13,0,272,278,284,289,296,298,305,310,312,328,332,341,
		1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace generated.parser
