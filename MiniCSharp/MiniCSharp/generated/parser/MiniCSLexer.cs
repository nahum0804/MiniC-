//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniCSLexer.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class MiniCSLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, WHILE=5, FOR=6, RETURN=7, BREAK=8, READ=9, 
		WRITE=10, NEW=11, TRUE=12, FALSE=13, BL=14, BR=15, COMMA=16, LEFTP=17, 
		RIGHTP=18, SBL=19, SBR=20, ASSIGN=21, ADD=22, SUB=23, OR=24, AND=25, BAR=26, 
		SEMICOLON=27, DOT=28, PLUS=29, EQEQ=30, NOTEQ=31, LESS=32, GREATER=33, 
		LESSEQ=34, GREATEREQ=35, MULT=36, DIV=37, MOD=38, NUMLIT=39, FLOATLIT=40, 
		CHARLIT=41, STRINGLIT=42, ID=43, LINE_COMMENT=44, WS=45;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"CLASS", "VOID", "IF", "ELSE", "WHILE", "FOR", "RETURN", "BREAK", "READ", 
		"WRITE", "NEW", "TRUE", "FALSE", "BL", "BR", "COMMA", "LEFTP", "RIGHTP", 
		"SBL", "SBR", "ASSIGN", "ADD", "SUB", "OR", "AND", "BAR", "SEMICOLON", 
		"DOT", "PLUS", "EQEQ", "NOTEQ", "LESS", "GREATER", "LESSEQ", "GREATEREQ", 
		"MULT", "DIV", "MOD", "NUMLIT", "FLOATLIT", "CHARLIT", "STRINGLIT", "ID", 
		"ESC_SEQ", "LETTER", "DIGIT", "LINE_COMMENT", "WS"
	};


	public MiniCSLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'while'", "'for'", "'return'", 
		"'break'", "'read'", "'write'", "'new'", "'true'", "'false'", "'{'", "'}'", 
		"','", "'('", "')'", "'['", "']'", "'='", "'++'", "'--'", "'||'", "'&&'", 
		"'-'", "';'", "'.'", "'+'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", 
		"'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "WHILE", "FOR", "RETURN", "BREAK", 
		"READ", "WRITE", "NEW", "TRUE", "FALSE", "BL", "BR", "COMMA", "LEFTP", 
		"RIGHTP", "SBL", "SBR", "ASSIGN", "ADD", "SUB", "OR", "AND", "BAR", "SEMICOLON", 
		"DOT", "PLUS", "EQEQ", "NOTEQ", "LESS", "GREATER", "LESSEQ", "GREATEREQ", 
		"MULT", "DIV", "MOD", "NUMLIT", "FLOATLIT", "CHARLIT", "STRINGLIT", "ID", 
		"LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static MiniCSLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2/\x12E");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3");
		sb.Append("\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3");
		sb.Append("\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3");
		sb.Append("\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3");
		sb.Append("\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11");
		sb.Append("\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3");
		sb.Append("\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18");
		sb.Append("\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3");
		sb.Append("\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F");
		sb.Append("\x3 \x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3#\x3$\x3$\x3$\x3%\x3");
		sb.Append("%\x3&\x3&\x3\'\x3\'\x3(\x3(\a(\xE4\n(\f(\xE(\xE7\v(\x3)\x6)");
		sb.Append("\xEA\n)\r)\xE)\xEB\x3)\x3)\x6)\xF0\n)\r)\xE)\xF1\x3*\x3*\x3");
		sb.Append("*\x5*\xF7\n*\x3*\x3*\x3+\x3+\x3+\a+\xFE\n+\f+\xE+\x101\v+\x3");
		sb.Append("+\x3+\x3,\x3,\x5,\x107\n,\x3,\x3,\x3,\a,\x10C\n,\f,\xE,\x10F");
		sb.Append("\v,\x3-\x3-\x3-\x3.\x3.\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30");
		sb.Append("\a\x30\x11C\n\x30\f\x30\xE\x30\x11F\v\x30\x3\x30\x5\x30\x122");
		sb.Append("\n\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x6\x31\x129\n\x31");
		sb.Append("\r\x31\xE\x31\x12A\x3\x31\x3\x31\x3\x11D\x2\x32\x3\x3\x5\x4");
		sb.Append("\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF");
		sb.Append("\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15)\x16+\x17-\x18/\x19\x31");
		sb.Append("\x1A\x33\x1B\x35\x1C\x37\x1D\x39\x1E;\x1F= ?!\x41\"\x43#\x45");
		sb.Append("$G%I&K\'M(O)Q*S+U,W-Y\x2[\x2]\x2_.\x61/\x3\x2\x6\x4\x2$$^^\n");
		sb.Append("\x2$$))^^\x64\x64hhppttvv\x4\x2\x43\\\x63|\x5\x2\v\f\xF\xF\"");
		sb.Append("\"\x137\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2");
		sb.Append("\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3");
		sb.Append("\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2");
		sb.Append("\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2");
		sb.Append("\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2");
		sb.Append("#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2");
		sb.Append("\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3");
		sb.Append("\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2");
		sb.Append("\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2");
		sb.Append("?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3");
		sb.Append("\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2");
		sb.Append("M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2");
		sb.Append("\x2U\x3\x2\x2\x2\x2W\x3\x2\x2\x2\x2_\x3\x2\x2\x2\x2\x61\x3\x2");
		sb.Append("\x2\x2\x3\x63\x3\x2\x2\x2\x5i\x3\x2\x2\x2\an\x3\x2\x2\x2\tq");
		sb.Append("\x3\x2\x2\x2\vv\x3\x2\x2\x2\r|\x3\x2\x2\x2\xF\x80\x3\x2\x2\x2");
		sb.Append("\x11\x87\x3\x2\x2\x2\x13\x8D\x3\x2\x2\x2\x15\x92\x3\x2\x2\x2");
		sb.Append("\x17\x98\x3\x2\x2\x2\x19\x9C\x3\x2\x2\x2\x1B\xA1\x3\x2\x2\x2");
		sb.Append("\x1D\xA7\x3\x2\x2\x2\x1F\xA9\x3\x2\x2\x2!\xAB\x3\x2\x2\x2#\xAD");
		sb.Append("\x3\x2\x2\x2%\xAF\x3\x2\x2\x2\'\xB1\x3\x2\x2\x2)\xB3\x3\x2\x2");
		sb.Append("\x2+\xB5\x3\x2\x2\x2-\xB7\x3\x2\x2\x2/\xBA\x3\x2\x2\x2\x31\xBD");
		sb.Append("\x3\x2\x2\x2\x33\xC0\x3\x2\x2\x2\x35\xC3\x3\x2\x2\x2\x37\xC5");
		sb.Append("\x3\x2\x2\x2\x39\xC7\x3\x2\x2\x2;\xC9\x3\x2\x2\x2=\xCB\x3\x2");
		sb.Append("\x2\x2?\xCE\x3\x2\x2\x2\x41\xD1\x3\x2\x2\x2\x43\xD3\x3\x2\x2");
		sb.Append("\x2\x45\xD5\x3\x2\x2\x2G\xD8\x3\x2\x2\x2I\xDB\x3\x2\x2\x2K\xDD");
		sb.Append("\x3\x2\x2\x2M\xDF\x3\x2\x2\x2O\xE1\x3\x2\x2\x2Q\xE9\x3\x2\x2");
		sb.Append("\x2S\xF3\x3\x2\x2\x2U\xFA\x3\x2\x2\x2W\x106\x3\x2\x2\x2Y\x110");
		sb.Append("\x3\x2\x2\x2[\x113\x3\x2\x2\x2]\x115\x3\x2\x2\x2_\x117\x3\x2");
		sb.Append("\x2\x2\x61\x128\x3\x2\x2\x2\x63\x64\a\x65\x2\x2\x64\x65\an\x2");
		sb.Append("\x2\x65\x66\a\x63\x2\x2\x66g\au\x2\x2gh\au\x2\x2h\x4\x3\x2\x2");
		sb.Append("\x2ij\ax\x2\x2jk\aq\x2\x2kl\ak\x2\x2lm\a\x66\x2\x2m\x6\x3\x2");
		sb.Append("\x2\x2no\ak\x2\x2op\ah\x2\x2p\b\x3\x2\x2\x2qr\ag\x2\x2rs\an");
		sb.Append("\x2\x2st\au\x2\x2tu\ag\x2\x2u\n\x3\x2\x2\x2vw\ay\x2\x2wx\aj");
		sb.Append("\x2\x2xy\ak\x2\x2yz\an\x2\x2z{\ag\x2\x2{\f\x3\x2\x2\x2|}\ah");
		sb.Append("\x2\x2}~\aq\x2\x2~\x7F\at\x2\x2\x7F\xE\x3\x2\x2\x2\x80\x81\a");
		sb.Append("t\x2\x2\x81\x82\ag\x2\x2\x82\x83\av\x2\x2\x83\x84\aw\x2\x2\x84");
		sb.Append("\x85\at\x2\x2\x85\x86\ap\x2\x2\x86\x10\x3\x2\x2\x2\x87\x88\a");
		sb.Append("\x64\x2\x2\x88\x89\at\x2\x2\x89\x8A\ag\x2\x2\x8A\x8B\a\x63\x2");
		sb.Append("\x2\x8B\x8C\am\x2\x2\x8C\x12\x3\x2\x2\x2\x8D\x8E\at\x2\x2\x8E");
		sb.Append("\x8F\ag\x2\x2\x8F\x90\a\x63\x2\x2\x90\x91\a\x66\x2\x2\x91\x14");
		sb.Append("\x3\x2\x2\x2\x92\x93\ay\x2\x2\x93\x94\at\x2\x2\x94\x95\ak\x2");
		sb.Append("\x2\x95\x96\av\x2\x2\x96\x97\ag\x2\x2\x97\x16\x3\x2\x2\x2\x98");
		sb.Append("\x99\ap\x2\x2\x99\x9A\ag\x2\x2\x9A\x9B\ay\x2\x2\x9B\x18\x3\x2");
		sb.Append("\x2\x2\x9C\x9D\av\x2\x2\x9D\x9E\at\x2\x2\x9E\x9F\aw\x2\x2\x9F");
		sb.Append("\xA0\ag\x2\x2\xA0\x1A\x3\x2\x2\x2\xA1\xA2\ah\x2\x2\xA2\xA3\a");
		sb.Append("\x63\x2\x2\xA3\xA4\an\x2\x2\xA4\xA5\au\x2\x2\xA5\xA6\ag\x2\x2");
		sb.Append("\xA6\x1C\x3\x2\x2\x2\xA7\xA8\a}\x2\x2\xA8\x1E\x3\x2\x2\x2\xA9");
		sb.Append("\xAA\a\x7F\x2\x2\xAA \x3\x2\x2\x2\xAB\xAC\a.\x2\x2\xAC\"\x3");
		sb.Append("\x2\x2\x2\xAD\xAE\a*\x2\x2\xAE$\x3\x2\x2\x2\xAF\xB0\a+\x2\x2");
		sb.Append("\xB0&\x3\x2\x2\x2\xB1\xB2\a]\x2\x2\xB2(\x3\x2\x2\x2\xB3\xB4");
		sb.Append("\a_\x2\x2\xB4*\x3\x2\x2\x2\xB5\xB6\a?\x2\x2\xB6,\x3\x2\x2\x2");
		sb.Append("\xB7\xB8\a-\x2\x2\xB8\xB9\a-\x2\x2\xB9.\x3\x2\x2\x2\xBA\xBB");
		sb.Append("\a/\x2\x2\xBB\xBC\a/\x2\x2\xBC\x30\x3\x2\x2\x2\xBD\xBE\a~\x2");
		sb.Append("\x2\xBE\xBF\a~\x2\x2\xBF\x32\x3\x2\x2\x2\xC0\xC1\a(\x2\x2\xC1");
		sb.Append("\xC2\a(\x2\x2\xC2\x34\x3\x2\x2\x2\xC3\xC4\a/\x2\x2\xC4\x36\x3");
		sb.Append("\x2\x2\x2\xC5\xC6\a=\x2\x2\xC6\x38\x3\x2\x2\x2\xC7\xC8\a\x30");
		sb.Append("\x2\x2\xC8:\x3\x2\x2\x2\xC9\xCA\a-\x2\x2\xCA<\x3\x2\x2\x2\xCB");
		sb.Append("\xCC\a?\x2\x2\xCC\xCD\a?\x2\x2\xCD>\x3\x2\x2\x2\xCE\xCF\a#\x2");
		sb.Append("\x2\xCF\xD0\a?\x2\x2\xD0@\x3\x2\x2\x2\xD1\xD2\a>\x2\x2\xD2\x42");
		sb.Append("\x3\x2\x2\x2\xD3\xD4\a@\x2\x2\xD4\x44\x3\x2\x2\x2\xD5\xD6\a");
		sb.Append(">\x2\x2\xD6\xD7\a?\x2\x2\xD7\x46\x3\x2\x2\x2\xD8\xD9\a@\x2\x2");
		sb.Append("\xD9\xDA\a?\x2\x2\xDAH\x3\x2\x2\x2\xDB\xDC\a,\x2\x2\xDCJ\x3");
		sb.Append("\x2\x2\x2\xDD\xDE\a\x31\x2\x2\xDEL\x3\x2\x2\x2\xDF\xE0\a\'\x2");
		sb.Append("\x2\xE0N\x3\x2\x2\x2\xE1\xE5\x5]/\x2\xE2\xE4\x5]/\x2\xE3\xE2");
		sb.Append("\x3\x2\x2\x2\xE4\xE7\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE6");
		sb.Append("\x3\x2\x2\x2\xE6P\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE8\xEA\x5");
		sb.Append("]/\x2\xE9\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xE9\x3\x2");
		sb.Append("\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\xEF\a\x30");
		sb.Append("\x2\x2\xEE\xF0\x5]/\x2\xEF\xEE\x3\x2\x2\x2\xF0\xF1\x3\x2\x2");
		sb.Append("\x2\xF1\xEF\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2R\x3\x2\x2\x2");
		sb.Append("\xF3\xF6\a)\x2\x2\xF4\xF7\x5Y-\x2\xF5\xF7\v\x2\x2\x2\xF6\xF4");
		sb.Append("\x3\x2\x2\x2\xF6\xF5\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xF9");
		sb.Append("\a)\x2\x2\xF9T\x3\x2\x2\x2\xFA\xFF\a$\x2\x2\xFB\xFE\x5Y-\x2");
		sb.Append("\xFC\xFE\n\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFC\x3\x2\x2\x2");
		sb.Append("\xFE\x101\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2\xFF\x100\x3\x2\x2");
		sb.Append("\x2\x100\x102\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x102\x103\a$");
		sb.Append("\x2\x2\x103V\x3\x2\x2\x2\x104\x107\a\x61\x2\x2\x105\x107\x5");
		sb.Append("[.\x2\x106\x104\x3\x2\x2\x2\x106\x105\x3\x2\x2\x2\x107\x10D");
		sb.Append("\x3\x2\x2\x2\x108\x10C\x5[.\x2\x109\x10C\x5]/\x2\x10A\x10C\a");
		sb.Append("\x30\x2\x2\x10B\x108\x3\x2\x2\x2\x10B\x109\x3\x2\x2\x2\x10B");
		sb.Append("\x10A\x3\x2\x2\x2\x10C\x10F\x3\x2\x2\x2\x10D\x10B\x3\x2\x2\x2");
		sb.Append("\x10D\x10E\x3\x2\x2\x2\x10EX\x3\x2\x2\x2\x10F\x10D\x3\x2\x2");
		sb.Append("\x2\x110\x111\a^\x2\x2\x111\x112\t\x3\x2\x2\x112Z\x3\x2\x2\x2");
		sb.Append("\x113\x114\t\x4\x2\x2\x114\\\x3\x2\x2\x2\x115\x116\x4\x32;\x2");
		sb.Append("\x116^\x3\x2\x2\x2\x117\x118\a\x31\x2\x2\x118\x119\a\x31\x2");
		sb.Append("\x2\x119\x11D\x3\x2\x2\x2\x11A\x11C\v\x2\x2\x2\x11B\x11A\x3");
		sb.Append("\x2\x2\x2\x11C\x11F\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2\x11D\x11B");
		sb.Append("\x3\x2\x2\x2\x11E\x121\x3\x2\x2\x2\x11F\x11D\x3\x2\x2\x2\x120");
		sb.Append("\x122\a\xF\x2\x2\x121\x120\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2");
		sb.Append("\x122\x123\x3\x2\x2\x2\x123\x124\a\f\x2\x2\x124\x125\x3\x2\x2");
		sb.Append("\x2\x125\x126\b\x30\x2\x2\x126`\x3\x2\x2\x2\x127\x129\t\x5\x2");
		sb.Append("\x2\x128\x127\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x128\x3");
		sb.Append("\x2\x2\x2\x12A\x12B\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12D");
		sb.Append("\b\x31\x2\x2\x12D\x62\x3\x2\x2\x2\xF\x2\xE5\xEB\xF1\xF6\xFD");
		sb.Append("\xFF\x106\x10B\x10D\x11D\x121\x12A\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
