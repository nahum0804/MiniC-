//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/n4hum/OneDrive/Escritorio/Codigo-MainDir/C#/ProyectoCompi/MiniCSharp/MiniCSharp/MiniCSLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated.parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniCSLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, WHILE=5, FOR=6, RETURN=7, BREAK=8, READ=9, 
		WRITE=10, SWITCH=11, USING=12, DEFAULT=13, CASE=14, NEW=15, TRUE=16, FALSE=17, 
		BL=18, BR=19, COMMA=20, LEFTP=21, RIGHTP=22, SBL=23, SBR=24, ASSIGN=25, 
		ADD=26, SUB=27, OR=28, AND=29, BAR=30, SEMICOLON=31, DOT=32, PLUS=33, 
		EQEQ=34, NOTEQ=35, LESS=36, GREATER=37, LESSEQ=38, GREATEREQ=39, MULT=40, 
		DIV=41, MOD=42, DOTS=43, NUMLIT=44, FLOATLIT=45, CHARLIT=46, STRINGLIT=47, 
		ID=48, LINE_COMMENT=49, WS=50;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"CLASS", "VOID", "IF", "ELSE", "WHILE", "FOR", "RETURN", "BREAK", "READ", 
		"WRITE", "SWITCH", "USING", "DEFAULT", "CASE", "NEW", "TRUE", "FALSE", 
		"BL", "BR", "COMMA", "LEFTP", "RIGHTP", "SBL", "SBR", "ASSIGN", "ADD", 
		"SUB", "OR", "AND", "BAR", "SEMICOLON", "DOT", "PLUS", "EQEQ", "NOTEQ", 
		"LESS", "GREATER", "LESSEQ", "GREATEREQ", "MULT", "DIV", "MOD", "DOTS", 
		"NUMLIT", "FLOATLIT", "CHARLIT", "STRINGLIT", "ID", "ESC_SEQ", "LETTER", 
		"DIGIT", "LINE_COMMENT", "WS"
	};


	public MiniCSLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniCSLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'while'", "'for'", "'return'", 
		"'break'", "'read'", "'write'", "'switch'", "'using'", "'default'", "'case'", 
		"'new'", "'true'", "'false'", "'{'", "'}'", "','", "'('", "')'", "'['", 
		"']'", "'='", "'++'", "'--'", "'||'", "'&&'", "'-'", "';'", "'.'", "'+'", 
		"'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'*'", "'/'", "'%'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "WHILE", "FOR", "RETURN", "BREAK", 
		"READ", "WRITE", "SWITCH", "USING", "DEFAULT", "CASE", "NEW", "TRUE", 
		"FALSE", "BL", "BR", "COMMA", "LEFTP", "RIGHTP", "SBL", "SBR", "ASSIGN", 
		"ADD", "SUB", "OR", "AND", "BAR", "SEMICOLON", "DOT", "PLUS", "EQEQ", 
		"NOTEQ", "LESS", "GREATER", "LESSEQ", "GREATEREQ", "MULT", "DIV", "MOD", 
		"DOTS", "NUMLIT", "FLOATLIT", "CHARLIT", "STRINGLIT", "ID", "LINE_COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,50,338,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
		1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,
		5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
		1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
		1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
		1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,
		1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
		1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,
		1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,5,43,264,8,
		43,10,43,12,43,267,9,43,1,44,4,44,270,8,44,11,44,12,44,271,1,44,1,44,4,
		44,276,8,44,11,44,12,44,277,1,45,1,45,1,45,3,45,283,8,45,1,45,1,45,1,46,
		1,46,1,46,5,46,290,8,46,10,46,12,46,293,9,46,1,46,1,46,1,47,1,47,3,47,
		299,8,47,1,47,1,47,1,47,5,47,304,8,47,10,47,12,47,307,9,47,1,48,1,48,1,
		48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,5,51,320,8,51,10,51,12,51,323,
		9,51,1,51,3,51,326,8,51,1,51,1,51,1,51,1,51,1,52,4,52,333,8,52,11,52,12,
		52,334,1,52,1,52,1,321,0,53,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
		10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
		22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
		34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
		46,93,47,95,48,97,0,99,0,101,0,103,49,105,50,1,0,4,2,0,34,34,92,92,8,0,
		34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,2,0,65,90,97,122,
		3,0,9,10,13,13,32,32,347,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
		0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
		1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
		0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
		1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
		0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
		0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
		1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
		0,0,103,1,0,0,0,0,105,1,0,0,0,1,107,1,0,0,0,3,113,1,0,0,0,5,118,1,0,0,
		0,7,121,1,0,0,0,9,126,1,0,0,0,11,132,1,0,0,0,13,136,1,0,0,0,15,143,1,0,
		0,0,17,149,1,0,0,0,19,154,1,0,0,0,21,160,1,0,0,0,23,167,1,0,0,0,25,173,
		1,0,0,0,27,181,1,0,0,0,29,186,1,0,0,0,31,190,1,0,0,0,33,195,1,0,0,0,35,
		201,1,0,0,0,37,203,1,0,0,0,39,205,1,0,0,0,41,207,1,0,0,0,43,209,1,0,0,
		0,45,211,1,0,0,0,47,213,1,0,0,0,49,215,1,0,0,0,51,217,1,0,0,0,53,220,1,
		0,0,0,55,223,1,0,0,0,57,226,1,0,0,0,59,229,1,0,0,0,61,231,1,0,0,0,63,233,
		1,0,0,0,65,235,1,0,0,0,67,237,1,0,0,0,69,240,1,0,0,0,71,243,1,0,0,0,73,
		245,1,0,0,0,75,247,1,0,0,0,77,250,1,0,0,0,79,253,1,0,0,0,81,255,1,0,0,
		0,83,257,1,0,0,0,85,259,1,0,0,0,87,261,1,0,0,0,89,269,1,0,0,0,91,279,1,
		0,0,0,93,286,1,0,0,0,95,298,1,0,0,0,97,308,1,0,0,0,99,311,1,0,0,0,101,
		313,1,0,0,0,103,315,1,0,0,0,105,332,1,0,0,0,107,108,5,99,0,0,108,109,5,
		108,0,0,109,110,5,97,0,0,110,111,5,115,0,0,111,112,5,115,0,0,112,2,1,0,
		0,0,113,114,5,118,0,0,114,115,5,111,0,0,115,116,5,105,0,0,116,117,5,100,
		0,0,117,4,1,0,0,0,118,119,5,105,0,0,119,120,5,102,0,0,120,6,1,0,0,0,121,
		122,5,101,0,0,122,123,5,108,0,0,123,124,5,115,0,0,124,125,5,101,0,0,125,
		8,1,0,0,0,126,127,5,119,0,0,127,128,5,104,0,0,128,129,5,105,0,0,129,130,
		5,108,0,0,130,131,5,101,0,0,131,10,1,0,0,0,132,133,5,102,0,0,133,134,5,
		111,0,0,134,135,5,114,0,0,135,12,1,0,0,0,136,137,5,114,0,0,137,138,5,101,
		0,0,138,139,5,116,0,0,139,140,5,117,0,0,140,141,5,114,0,0,141,142,5,110,
		0,0,142,14,1,0,0,0,143,144,5,98,0,0,144,145,5,114,0,0,145,146,5,101,0,
		0,146,147,5,97,0,0,147,148,5,107,0,0,148,16,1,0,0,0,149,150,5,114,0,0,
		150,151,5,101,0,0,151,152,5,97,0,0,152,153,5,100,0,0,153,18,1,0,0,0,154,
		155,5,119,0,0,155,156,5,114,0,0,156,157,5,105,0,0,157,158,5,116,0,0,158,
		159,5,101,0,0,159,20,1,0,0,0,160,161,5,115,0,0,161,162,5,119,0,0,162,163,
		5,105,0,0,163,164,5,116,0,0,164,165,5,99,0,0,165,166,5,104,0,0,166,22,
		1,0,0,0,167,168,5,117,0,0,168,169,5,115,0,0,169,170,5,105,0,0,170,171,
		5,110,0,0,171,172,5,103,0,0,172,24,1,0,0,0,173,174,5,100,0,0,174,175,5,
		101,0,0,175,176,5,102,0,0,176,177,5,97,0,0,177,178,5,117,0,0,178,179,5,
		108,0,0,179,180,5,116,0,0,180,26,1,0,0,0,181,182,5,99,0,0,182,183,5,97,
		0,0,183,184,5,115,0,0,184,185,5,101,0,0,185,28,1,0,0,0,186,187,5,110,0,
		0,187,188,5,101,0,0,188,189,5,119,0,0,189,30,1,0,0,0,190,191,5,116,0,0,
		191,192,5,114,0,0,192,193,5,117,0,0,193,194,5,101,0,0,194,32,1,0,0,0,195,
		196,5,102,0,0,196,197,5,97,0,0,197,198,5,108,0,0,198,199,5,115,0,0,199,
		200,5,101,0,0,200,34,1,0,0,0,201,202,5,123,0,0,202,36,1,0,0,0,203,204,
		5,125,0,0,204,38,1,0,0,0,205,206,5,44,0,0,206,40,1,0,0,0,207,208,5,40,
		0,0,208,42,1,0,0,0,209,210,5,41,0,0,210,44,1,0,0,0,211,212,5,91,0,0,212,
		46,1,0,0,0,213,214,5,93,0,0,214,48,1,0,0,0,215,216,5,61,0,0,216,50,1,0,
		0,0,217,218,5,43,0,0,218,219,5,43,0,0,219,52,1,0,0,0,220,221,5,45,0,0,
		221,222,5,45,0,0,222,54,1,0,0,0,223,224,5,124,0,0,224,225,5,124,0,0,225,
		56,1,0,0,0,226,227,5,38,0,0,227,228,5,38,0,0,228,58,1,0,0,0,229,230,5,
		45,0,0,230,60,1,0,0,0,231,232,5,59,0,0,232,62,1,0,0,0,233,234,5,46,0,0,
		234,64,1,0,0,0,235,236,5,43,0,0,236,66,1,0,0,0,237,238,5,61,0,0,238,239,
		5,61,0,0,239,68,1,0,0,0,240,241,5,33,0,0,241,242,5,61,0,0,242,70,1,0,0,
		0,243,244,5,60,0,0,244,72,1,0,0,0,245,246,5,62,0,0,246,74,1,0,0,0,247,
		248,5,60,0,0,248,249,5,61,0,0,249,76,1,0,0,0,250,251,5,62,0,0,251,252,
		5,61,0,0,252,78,1,0,0,0,253,254,5,42,0,0,254,80,1,0,0,0,255,256,5,47,0,
		0,256,82,1,0,0,0,257,258,5,37,0,0,258,84,1,0,0,0,259,260,5,58,0,0,260,
		86,1,0,0,0,261,265,3,101,50,0,262,264,3,101,50,0,263,262,1,0,0,0,264,267,
		1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,88,1,0,0,0,267,265,1,0,0,0,
		268,270,3,101,50,0,269,268,1,0,0,0,270,271,1,0,0,0,271,269,1,0,0,0,271,
		272,1,0,0,0,272,273,1,0,0,0,273,275,5,46,0,0,274,276,3,101,50,0,275,274,
		1,0,0,0,276,277,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,90,1,0,0,0,
		279,282,5,39,0,0,280,283,3,97,48,0,281,283,9,0,0,0,282,280,1,0,0,0,282,
		281,1,0,0,0,283,284,1,0,0,0,284,285,5,39,0,0,285,92,1,0,0,0,286,291,5,
		34,0,0,287,290,3,97,48,0,288,290,8,0,0,0,289,287,1,0,0,0,289,288,1,0,0,
		0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,
		291,1,0,0,0,294,295,5,34,0,0,295,94,1,0,0,0,296,299,5,95,0,0,297,299,3,
		99,49,0,298,296,1,0,0,0,298,297,1,0,0,0,299,305,1,0,0,0,300,304,3,99,49,
		0,301,304,3,101,50,0,302,304,5,46,0,0,303,300,1,0,0,0,303,301,1,0,0,0,
		303,302,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,96,
		1,0,0,0,307,305,1,0,0,0,308,309,5,92,0,0,309,310,7,1,0,0,310,98,1,0,0,
		0,311,312,7,2,0,0,312,100,1,0,0,0,313,314,2,48,57,0,314,102,1,0,0,0,315,
		316,5,47,0,0,316,317,5,47,0,0,317,321,1,0,0,0,318,320,9,0,0,0,319,318,
		1,0,0,0,320,323,1,0,0,0,321,322,1,0,0,0,321,319,1,0,0,0,322,325,1,0,0,
		0,323,321,1,0,0,0,324,326,5,13,0,0,325,324,1,0,0,0,325,326,1,0,0,0,326,
		327,1,0,0,0,327,328,5,10,0,0,328,329,1,0,0,0,329,330,6,51,0,0,330,104,
		1,0,0,0,331,333,7,3,0,0,332,331,1,0,0,0,333,334,1,0,0,0,334,332,1,0,0,
		0,334,335,1,0,0,0,335,336,1,0,0,0,336,337,6,52,0,0,337,106,1,0,0,0,13,
		0,265,271,277,282,289,291,298,303,305,321,325,334,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace generated.parser
