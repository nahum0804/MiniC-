//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/n4hum/OneDrive/Escritorio/Codigo-MainDir/C#/ProyectoCompi/MiniCSharp/MiniCSharp/MiniCSParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated.parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniCSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, WHILE=5, FOR=6, RETURN=7, BREAK=8, READ=9, 
		WRITE=10, SWITCH=11, USING=12, DEFAULT=13, CASE=14, LIST=15, NEW=16, TRUE=17, 
		FALSE=18, BL=19, BR=20, COMMA=21, LEFTP=22, RIGHTP=23, SBL=24, SBR=25, 
		ASSIGN=26, ADD=27, SUB=28, OR=29, AND=30, BAR=31, SEMICOLON=32, DOT=33, 
		PLUS=34, EQEQ=35, NOTEQ=36, LESS=37, GREATER=38, LESSEQ=39, GREATEREQ=40, 
		MULT=41, DIV=42, MOD=43, DOTS=44, NUMLIT=45, FLOATLIT=46, CHARLIT=47, 
		STRINGLIT=48, ID=49, LINE_COMMENT=50, WS=51, INT=52, CHAR=53, BOOL=54, 
		STRING_TYPE=55;
	public const int
		RULE_program = 0, RULE_varDecl = 1, RULE_classDecl = 2, RULE_methodDecl = 3, 
		RULE_formPars = 4, RULE_type = 5, RULE_simpleType = 6, RULE_statement = 7, 
		RULE_block = 8, RULE_actPars = 9, RULE_condition = 10, RULE_condTerm = 11, 
		RULE_condFact = 12, RULE_cast = 13, RULE_expr = 14, RULE_term = 15, RULE_factor = 16, 
		RULE_listLiteral = 17, RULE_designator = 18, RULE_relop = 19, RULE_addop = 20, 
		RULE_mulop = 21, RULE_ident = 22, RULE_caseBlock = 23, RULE_usingDecl = 24;
	public static readonly string[] ruleNames = {
		"program", "varDecl", "classDecl", "methodDecl", "formPars", "type", "simpleType", 
		"statement", "block", "actPars", "condition", "condTerm", "condFact", 
		"cast", "expr", "term", "factor", "listLiteral", "designator", "relop", 
		"addop", "mulop", "ident", "caseBlock", "usingDecl"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'while'", "'for'", "'return'", 
		"'break'", "'read'", "'write'", "'switch'", "'using'", "'default'", "'case'", 
		"'List'", "'new'", "'true'", "'false'", "'{'", "'}'", "','", "'('", "')'", 
		"'['", "']'", "'='", "'++'", "'--'", "'||'", "'&&'", "'-'", "';'", "'.'", 
		"'+'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'*'", "'/'", "'%'", 
		"':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "WHILE", "FOR", "RETURN", "BREAK", 
		"READ", "WRITE", "SWITCH", "USING", "DEFAULT", "CASE", "LIST", "NEW", 
		"TRUE", "FALSE", "BL", "BR", "COMMA", "LEFTP", "RIGHTP", "SBL", "SBR", 
		"ASSIGN", "ADD", "SUB", "OR", "AND", "BAR", "SEMICOLON", "DOT", "PLUS", 
		"EQEQ", "NOTEQ", "LESS", "GREATER", "LESSEQ", "GREATEREQ", "MULT", "DIV", 
		"MOD", "DOTS", "NUMLIT", "FLOATLIT", "CHARLIT", "STRINGLIT", "ID", "LINE_COMMENT", 
		"WS", "INT", "CHAR", "BOOL", "STRING_TYPE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCSParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCSParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BL() { return GetToken(MiniCSParser.BL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BR() { return GetToken(MiniCSParser.BR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclContext[] usingDecl() {
			return GetRuleContexts<UsingDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclContext usingDecl(int i) {
			return GetRuleContext<UsingDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 50;
				usingDecl();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 56;
			Match(CLASS);
			State = 57;
			ident();
			State = 58;
			Match(BL);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68116944364011526L) != 0)) {
				{
				State = 62;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 59;
					varDecl();
					}
					break;
				case 2:
					{
					State = 60;
					classDecl();
					}
					break;
				case 3:
					{
					State = 61;
					methodDecl();
					}
					break;
				}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 67;
			Match(BR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSParser.COMMA, i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			type();
			State = 70;
			ident();
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 71;
				Match(COMMA);
				State = 72;
				ident();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BL() { return GetToken(MiniCSParser.BL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BR() { return GetToken(MiniCSParser.BR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(CLASS);
			State = 81;
			ident();
			State = 82;
			Match(BL);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68116944364011524L) != 0)) {
				{
				State = 85;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 83;
					varDecl();
					}
					break;
				case 2:
					{
					State = 84;
					methodDecl();
					}
					break;
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90;
			Match(BR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTP() { return GetToken(MiniCSParser.LEFTP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTP() { return GetToken(MiniCSParser.RIGHTP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MiniCSParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIST:
			case ID:
			case INT:
			case CHAR:
			case BOOL:
			case STRING_TYPE:
				{
				State = 92;
				type();
				}
				break;
			case VOID:
				{
				State = 93;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 96;
			ident();
			State = 97;
			Match(LEFTP);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68116944364011520L) != 0)) {
				{
				State = 98;
				formPars();
				}
			}

			State = 101;
			Match(RIGHTP);
			State = 102;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSParser.COMMA, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterFormPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitFormPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 8, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			type();
			State = 105;
			ident();
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 106;
				Match(COMMA);
				State = 107;
				type();
				State = 108;
				ident();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListOfSimpleContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(MiniCSParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MiniCSParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(MiniCSParser.GREATER, 0); }
		public ListOfSimpleContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterListOfSimple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitListOfSimple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOfSimple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpletypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public SimpletypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterSimpletype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitSimpletype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpletype(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UserTypeOrArrayContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBL() { return GetToken(MiniCSParser.SBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBR() { return GetToken(MiniCSParser.SBR, 0); }
		public UserTypeOrArrayContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterUserTypeOrArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitUserTypeOrArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserTypeOrArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		int _la;
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CHAR:
			case BOOL:
			case STRING_TYPE:
				_localctx = new SimpletypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 115;
				simpleType();
				}
				break;
			case LIST:
				_localctx = new ListOfSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				Match(LIST);
				State = 117;
				Match(LESS);
				State = 118;
				simpleType();
				State = 119;
				Match(GREATER);
				}
				break;
			case ID:
				_localctx = new UserTypeOrArrayContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 121;
				ident();
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SBL) {
					{
					State = 122;
					Match(SBL);
					State = 123;
					Match(SBR);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
	 
		public SimpleTypeContext() { }
		public virtual void CopyFrom(SimpleTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CharTypeContext : SimpleTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MiniCSParser.CHAR, 0); }
		public CharTypeContext(SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterCharType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitCharType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntTypeContext : SimpleTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MiniCSParser.INT, 0); }
		public IntTypeContext(SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterIntType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitIntType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringTypeContext : SimpleTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(MiniCSParser.STRING_TYPE, 0); }
		public StringTypeContext(SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterStringType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitStringType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolTypeContext : SimpleTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MiniCSParser.BOOL, 0); }
		public BoolTypeContext(SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterBoolType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitBoolType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_simpleType);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				Match(INT);
				}
				break;
			case CHAR:
				_localctx = new CharTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				Match(CHAR);
				}
				break;
			case BOOL:
				_localctx = new BoolTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 130;
				Match(BOOL);
				}
				break;
			case STRING_TYPE:
				_localctx = new StringTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 131;
				Match(STRING_TYPE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(MiniCSParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniCSParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCSParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTP() { return GetToken(MiniCSParser.LEFTP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTP() { return GetToken(MiniCSParser.RIGHTP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MiniCSParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(MiniCSParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniCSParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniCSParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniCSParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniCSParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MiniCSParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniCSParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MiniCSParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MiniCSParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MiniCSParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMLIT() { return GetToken(MiniCSParser.NUMLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(MiniCSParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BL() { return GetToken(MiniCSParser.BL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBL() { return GetToken(MiniCSParser.SBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MiniCSParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTS() { return GetToken(MiniCSParser.DOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBR() { return GetToken(MiniCSParser.SBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BR() { return GetToken(MiniCSParser.BR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134;
				designator();
				State = 144;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASSIGN:
					{
					State = 135;
					Match(ASSIGN);
					State = 136;
					expr();
					}
					break;
				case LEFTP:
					{
					State = 137;
					Match(LEFTP);
					State = 139;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1020486381666304L) != 0)) {
						{
						State = 138;
						actPars();
						}
					}

					State = 141;
					Match(RIGHTP);
					}
					break;
				case ADD:
					{
					State = 142;
					Match(ADD);
					}
					break;
				case SUB:
					{
					State = 143;
					Match(SUB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 146;
				Match(SEMICOLON);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				Match(IF);
				State = 149;
				Match(LEFTP);
				State = 150;
				condition();
				State = 151;
				Match(RIGHTP);
				State = 152;
				statement();
				State = 155;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 153;
					Match(ELSE);
					State = 154;
					statement();
					}
					break;
				}
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 157;
				Match(FOR);
				State = 158;
				Match(LEFTP);
				State = 159;
				expr();
				State = 160;
				Match(SEMICOLON);
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1020486381666304L) != 0)) {
					{
					State = 161;
					condition();
					}
				}

				State = 164;
				Match(SEMICOLON);
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562954248916968L) != 0)) {
					{
					State = 165;
					statement();
					}
				}

				State = 168;
				Match(RIGHTP);
				State = 169;
				statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 171;
				Match(WHILE);
				State = 172;
				Match(LEFTP);
				State = 173;
				condition();
				State = 174;
				Match(RIGHTP);
				State = 175;
				statement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 177;
				Match(BREAK);
				State = 178;
				Match(SEMICOLON);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 179;
				Match(RETURN);
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1020486381666304L) != 0)) {
					{
					State = 180;
					expr();
					}
				}

				State = 183;
				Match(SEMICOLON);
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 184;
				Match(READ);
				State = 185;
				Match(LEFTP);
				State = 186;
				designator();
				State = 187;
				Match(RIGHTP);
				State = 188;
				Match(SEMICOLON);
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 190;
				Match(WRITE);
				State = 191;
				Match(LEFTP);
				State = 192;
				expr();
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 193;
					Match(COMMA);
					State = 194;
					Match(NUMLIT);
					}
				}

				State = 197;
				Match(RIGHTP);
				State = 198;
				Match(SEMICOLON);
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 9);
				{
				State = 200;
				Match(SWITCH);
				State = 201;
				Match(LEFTP);
				State = 202;
				expr();
				State = 203;
				Match(RIGHTP);
				State = 204;
				Match(BL);
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE) {
					{
					{
					State = 205;
					caseBlock();
					}
					}
					State = 210;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 211;
				Match(SBL);
				State = 212;
				Match(DEFAULT);
				State = 213;
				Match(DOTS);
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562954248916968L) != 0)) {
					{
					{
					State = 214;
					statement();
					}
					}
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 220;
				Match(SBR);
				State = 221;
				Match(BR);
				State = 222;
				Match(SEMICOLON);
				}
				break;
			case BL:
				EnterOuterAlt(_localctx, 10);
				{
				State = 224;
				block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 11);
				{
				State = 225;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BL() { return GetToken(MiniCSParser.BL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BR() { return GetToken(MiniCSParser.BR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(BL);
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68116948659507176L) != 0)) {
				{
				State = 231;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 229;
					varDecl();
					}
					break;
				case 2:
					{
					State = 230;
					statement();
					}
					break;
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 236;
			Match(BR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSParser.COMMA, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterActPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitActPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 18, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			expr();
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 239;
				Match(COMMA);
				State = 240;
				expr();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(MiniCSParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(MiniCSParser.OR, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			condTerm();
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 247;
				Match(OR);
				State = 248;
				condTerm();
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MiniCSParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MiniCSParser.AND, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterCondTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitCondTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 22, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			condFact();
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 255;
				Match(AND);
				State = 256;
				condFact();
				}
				}
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterCondFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitCondFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 24, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			expr();
			State = 263;
			relop();
			State = 264;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTP() { return GetToken(MiniCSParser.LEFTP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTP() { return GetToken(MiniCSParser.RIGHTP, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 26, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			Match(LEFTP);
			State = 267;
			type();
			State = 268;
			Match(RIGHTP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAR() { return GetToken(MiniCSParser.BAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BAR) {
				{
				State = 270;
				Match(BAR);
				}
			}

			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 273;
				cast();
				}
				break;
			}
			State = 276;
			term();
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BAR || _la==PLUS) {
				{
				{
				State = 277;
				addop();
				State = 278;
				term();
				}
				}
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 30, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			factor();
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 15393162788864L) != 0)) {
				{
				{
				State = 286;
				mulop();
				State = 287;
				factor();
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTP() { return GetToken(MiniCSParser.LEFTP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTP() { return GetToken(MiniCSParser.RIGHTP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMLIT() { return GetToken(MiniCSParser.NUMLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARLIT() { return GetToken(MiniCSParser.CHARLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLIT() { return GetToken(MiniCSParser.STRINGLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MiniCSParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MiniCSParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(MiniCSParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListLiteralContext listLiteral() {
			return GetRuleContext<ListLiteralContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 32, RULE_factor);
		int _la;
		try {
			State = 314;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294;
				designator();
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFTP) {
					{
					State = 295;
					Match(LEFTP);
					State = 297;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1020486381666304L) != 0)) {
						{
						State = 296;
						actPars();
						}
					}

					State = 299;
					Match(RIGHTP);
					}
				}

				}
				break;
			case NUMLIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302;
				Match(NUMLIT);
				}
				break;
			case CHARLIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 303;
				Match(CHARLIT);
				}
				break;
			case STRINGLIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 304;
				Match(STRINGLIT);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 305;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 306;
				Match(FALSE);
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 7);
				{
				State = 307;
				Match(NEW);
				State = 308;
				ident();
				}
				break;
			case LEFTP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 309;
				Match(LEFTP);
				State = 310;
				expr();
				State = 311;
				Match(RIGHTP);
				}
				break;
			case LESS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 313;
				listLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MiniCSParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(MiniCSParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSParser.COMMA, i);
		}
		public ListLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterListLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitListLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListLiteralContext listLiteral() {
		ListLiteralContext _localctx = new ListLiteralContext(Context, State);
		EnterRule(_localctx, 34, RULE_listLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(LESS);
			State = 317;
			expr();
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 318;
				Match(COMMA);
				State = 319;
				expr();
				}
				}
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 325;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCSParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCSParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SBL() { return GetTokens(MiniCSParser.SBL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBL(int i) {
			return GetToken(MiniCSParser.SBL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SBR() { return GetTokens(MiniCSParser.SBR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBR(int i) {
			return GetToken(MiniCSParser.SBR, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			ident();
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SBL || _la==DOT) {
				{
				State = 334;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 328;
					Match(DOT);
					State = 329;
					ident();
					}
					break;
				case SBL:
					{
					State = 330;
					Match(SBL);
					State = 331;
					expr();
					State = 332;
					Match(SBR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQ() { return GetToken(MiniCSParser.EQEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQ() { return GetToken(MiniCSParser.NOTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(MiniCSParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQ() { return GetToken(MiniCSParser.GREATEREQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MiniCSParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQ() { return GetToken(MiniCSParser.LESSEQ, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 38, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2164663517184L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MiniCSParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAR() { return GetToken(MiniCSParser.BAR, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterAddop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitAddop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 40, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			_la = TokenStream.LA(1);
			if ( !(_la==BAR || _la==PLUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(MiniCSParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MiniCSParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MiniCSParser.MOD, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterMulop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitMulop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 42, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15393162788864L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSParser.ID, 0); }
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 44, RULE_ident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MiniCSParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTS() { return GetToken(MiniCSParser.DOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 46, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(CASE);
			State = 348;
			condition();
			State = 349;
			Match(DOTS);
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562954248916968L) != 0)) {
				{
				{
				State = 350;
				statement();
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MiniCSParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCSParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCSParser.DOT, i);
		}
		public UsingDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterUsingDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitUsingDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclContext usingDecl() {
		UsingDeclContext _localctx = new UsingDeclContext(Context, State);
		EnterRule(_localctx, 48, RULE_usingDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			Match(USING);
			State = 357;
			ident();
			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 358;
				Match(DOT);
				State = 359;
				ident();
				}
				}
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 365;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,55,368,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,5,0,52,8,0,10,0,12,0,55,9,0,1,0,1,0,
		1,0,1,0,1,0,1,0,5,0,63,8,0,10,0,12,0,66,9,0,1,0,1,0,1,1,1,1,1,1,1,1,5,
		1,74,8,1,10,1,12,1,77,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,5,2,86,8,2,10,2,
		12,2,89,9,2,1,2,1,2,1,3,1,3,3,3,95,8,3,1,3,1,3,1,3,3,3,100,8,3,1,3,1,3,
		1,3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,111,8,4,10,4,12,4,114,9,4,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,3,5,125,8,5,3,5,127,8,5,1,6,1,6,1,6,1,6,3,6,133,
		8,6,1,7,1,7,1,7,1,7,1,7,3,7,140,8,7,1,7,1,7,1,7,3,7,145,8,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,156,8,7,1,7,1,7,1,7,1,7,1,7,3,7,163,8,7,
		1,7,1,7,3,7,167,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,3,7,182,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,196,
		8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,207,8,7,10,7,12,7,210,9,7,
		1,7,1,7,1,7,1,7,5,7,216,8,7,10,7,12,7,219,9,7,1,7,1,7,1,7,1,7,1,7,1,7,
		3,7,227,8,7,1,8,1,8,1,8,5,8,232,8,8,10,8,12,8,235,9,8,1,8,1,8,1,9,1,9,
		1,9,5,9,242,8,9,10,9,12,9,245,9,9,1,10,1,10,1,10,5,10,250,8,10,10,10,12,
		10,253,9,10,1,11,1,11,1,11,5,11,258,8,11,10,11,12,11,261,9,11,1,12,1,12,
		1,12,1,12,1,13,1,13,1,13,1,13,1,14,3,14,272,8,14,1,14,3,14,275,8,14,1,
		14,1,14,1,14,1,14,5,14,281,8,14,10,14,12,14,284,9,14,1,15,1,15,1,15,1,
		15,5,15,290,8,15,10,15,12,15,293,9,15,1,16,1,16,1,16,3,16,298,8,16,1,16,
		3,16,301,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,3,16,315,8,16,1,17,1,17,1,17,1,17,5,17,321,8,17,10,17,12,17,324,9,17,
		1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,335,8,18,10,18,12,18,
		338,9,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,5,
		23,352,8,23,10,23,12,23,355,9,23,1,24,1,24,1,24,1,24,5,24,361,8,24,10,
		24,12,24,364,9,24,1,24,1,24,1,24,0,0,25,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,48,0,3,1,0,35,40,2,0,31,31,34,34,1,
		0,41,43,403,0,53,1,0,0,0,2,69,1,0,0,0,4,80,1,0,0,0,6,94,1,0,0,0,8,104,
		1,0,0,0,10,126,1,0,0,0,12,132,1,0,0,0,14,226,1,0,0,0,16,228,1,0,0,0,18,
		238,1,0,0,0,20,246,1,0,0,0,22,254,1,0,0,0,24,262,1,0,0,0,26,266,1,0,0,
		0,28,271,1,0,0,0,30,285,1,0,0,0,32,314,1,0,0,0,34,316,1,0,0,0,36,327,1,
		0,0,0,38,339,1,0,0,0,40,341,1,0,0,0,42,343,1,0,0,0,44,345,1,0,0,0,46,347,
		1,0,0,0,48,356,1,0,0,0,50,52,3,48,24,0,51,50,1,0,0,0,52,55,1,0,0,0,53,
		51,1,0,0,0,53,54,1,0,0,0,54,56,1,0,0,0,55,53,1,0,0,0,56,57,5,1,0,0,57,
		58,3,44,22,0,58,64,5,19,0,0,59,63,3,2,1,0,60,63,3,4,2,0,61,63,3,6,3,0,
		62,59,1,0,0,0,62,60,1,0,0,0,62,61,1,0,0,0,63,66,1,0,0,0,64,62,1,0,0,0,
		64,65,1,0,0,0,65,67,1,0,0,0,66,64,1,0,0,0,67,68,5,20,0,0,68,1,1,0,0,0,
		69,70,3,10,5,0,70,75,3,44,22,0,71,72,5,21,0,0,72,74,3,44,22,0,73,71,1,
		0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,75,1,
		0,0,0,78,79,5,32,0,0,79,3,1,0,0,0,80,81,5,1,0,0,81,82,3,44,22,0,82,87,
		5,19,0,0,83,86,3,2,1,0,84,86,3,6,3,0,85,83,1,0,0,0,85,84,1,0,0,0,86,89,
		1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,87,1,0,0,0,90,91,
		5,20,0,0,91,5,1,0,0,0,92,95,3,10,5,0,93,95,5,2,0,0,94,92,1,0,0,0,94,93,
		1,0,0,0,95,96,1,0,0,0,96,97,3,44,22,0,97,99,5,22,0,0,98,100,3,8,4,0,99,
		98,1,0,0,0,99,100,1,0,0,0,100,101,1,0,0,0,101,102,5,23,0,0,102,103,3,16,
		8,0,103,7,1,0,0,0,104,105,3,10,5,0,105,112,3,44,22,0,106,107,5,21,0,0,
		107,108,3,10,5,0,108,109,3,44,22,0,109,111,1,0,0,0,110,106,1,0,0,0,111,
		114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,9,1,0,0,0,114,112,1,0,
		0,0,115,127,3,12,6,0,116,117,5,15,0,0,117,118,5,37,0,0,118,119,3,12,6,
		0,119,120,5,38,0,0,120,127,1,0,0,0,121,124,3,44,22,0,122,123,5,24,0,0,
		123,125,5,25,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,127,1,0,0,0,126,115,
		1,0,0,0,126,116,1,0,0,0,126,121,1,0,0,0,127,11,1,0,0,0,128,133,5,52,0,
		0,129,133,5,53,0,0,130,133,5,54,0,0,131,133,5,55,0,0,132,128,1,0,0,0,132,
		129,1,0,0,0,132,130,1,0,0,0,132,131,1,0,0,0,133,13,1,0,0,0,134,144,3,36,
		18,0,135,136,5,26,0,0,136,145,3,28,14,0,137,139,5,22,0,0,138,140,3,18,
		9,0,139,138,1,0,0,0,139,140,1,0,0,0,140,141,1,0,0,0,141,145,5,23,0,0,142,
		145,5,27,0,0,143,145,5,28,0,0,144,135,1,0,0,0,144,137,1,0,0,0,144,142,
		1,0,0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,147,5,32,0,0,147,227,1,0,0,
		0,148,149,5,3,0,0,149,150,5,22,0,0,150,151,3,20,10,0,151,152,5,23,0,0,
		152,155,3,14,7,0,153,154,5,4,0,0,154,156,3,14,7,0,155,153,1,0,0,0,155,
		156,1,0,0,0,156,227,1,0,0,0,157,158,5,6,0,0,158,159,5,22,0,0,159,160,3,
		28,14,0,160,162,5,32,0,0,161,163,3,20,10,0,162,161,1,0,0,0,162,163,1,0,
		0,0,163,164,1,0,0,0,164,166,5,32,0,0,165,167,3,14,7,0,166,165,1,0,0,0,
		166,167,1,0,0,0,167,168,1,0,0,0,168,169,5,23,0,0,169,170,3,14,7,0,170,
		227,1,0,0,0,171,172,5,5,0,0,172,173,5,22,0,0,173,174,3,20,10,0,174,175,
		5,23,0,0,175,176,3,14,7,0,176,227,1,0,0,0,177,178,5,8,0,0,178,227,5,32,
		0,0,179,181,5,7,0,0,180,182,3,28,14,0,181,180,1,0,0,0,181,182,1,0,0,0,
		182,183,1,0,0,0,183,227,5,32,0,0,184,185,5,9,0,0,185,186,5,22,0,0,186,
		187,3,36,18,0,187,188,5,23,0,0,188,189,5,32,0,0,189,227,1,0,0,0,190,191,
		5,10,0,0,191,192,5,22,0,0,192,195,3,28,14,0,193,194,5,21,0,0,194,196,5,
		45,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,197,1,0,0,0,197,198,5,23,0,
		0,198,199,5,32,0,0,199,227,1,0,0,0,200,201,5,11,0,0,201,202,5,22,0,0,202,
		203,3,28,14,0,203,204,5,23,0,0,204,208,5,19,0,0,205,207,3,46,23,0,206,
		205,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,211,1,
		0,0,0,210,208,1,0,0,0,211,212,5,24,0,0,212,213,5,13,0,0,213,217,5,44,0,
		0,214,216,3,14,7,0,215,214,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,
		218,1,0,0,0,218,220,1,0,0,0,219,217,1,0,0,0,220,221,5,25,0,0,221,222,5,
		20,0,0,222,223,5,32,0,0,223,227,1,0,0,0,224,227,3,16,8,0,225,227,5,32,
		0,0,226,134,1,0,0,0,226,148,1,0,0,0,226,157,1,0,0,0,226,171,1,0,0,0,226,
		177,1,0,0,0,226,179,1,0,0,0,226,184,1,0,0,0,226,190,1,0,0,0,226,200,1,
		0,0,0,226,224,1,0,0,0,226,225,1,0,0,0,227,15,1,0,0,0,228,233,5,19,0,0,
		229,232,3,2,1,0,230,232,3,14,7,0,231,229,1,0,0,0,231,230,1,0,0,0,232,235,
		1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,1,0,0,
		0,236,237,5,20,0,0,237,17,1,0,0,0,238,243,3,28,14,0,239,240,5,21,0,0,240,
		242,3,28,14,0,241,239,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,
		1,0,0,0,244,19,1,0,0,0,245,243,1,0,0,0,246,251,3,22,11,0,247,248,5,29,
		0,0,248,250,3,22,11,0,249,247,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,
		251,252,1,0,0,0,252,21,1,0,0,0,253,251,1,0,0,0,254,259,3,24,12,0,255,256,
		5,30,0,0,256,258,3,24,12,0,257,255,1,0,0,0,258,261,1,0,0,0,259,257,1,0,
		0,0,259,260,1,0,0,0,260,23,1,0,0,0,261,259,1,0,0,0,262,263,3,28,14,0,263,
		264,3,38,19,0,264,265,3,28,14,0,265,25,1,0,0,0,266,267,5,22,0,0,267,268,
		3,10,5,0,268,269,5,23,0,0,269,27,1,0,0,0,270,272,5,31,0,0,271,270,1,0,
		0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,275,3,26,13,0,274,273,1,0,0,0,
		274,275,1,0,0,0,275,276,1,0,0,0,276,282,3,30,15,0,277,278,3,40,20,0,278,
		279,3,30,15,0,279,281,1,0,0,0,280,277,1,0,0,0,281,284,1,0,0,0,282,280,
		1,0,0,0,282,283,1,0,0,0,283,29,1,0,0,0,284,282,1,0,0,0,285,291,3,32,16,
		0,286,287,3,42,21,0,287,288,3,32,16,0,288,290,1,0,0,0,289,286,1,0,0,0,
		290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,31,1,0,0,0,293,291,
		1,0,0,0,294,300,3,36,18,0,295,297,5,22,0,0,296,298,3,18,9,0,297,296,1,
		0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,301,5,23,0,0,300,295,1,0,0,0,
		300,301,1,0,0,0,301,315,1,0,0,0,302,315,5,45,0,0,303,315,5,47,0,0,304,
		315,5,48,0,0,305,315,5,17,0,0,306,315,5,18,0,0,307,308,5,16,0,0,308,315,
		3,44,22,0,309,310,5,22,0,0,310,311,3,28,14,0,311,312,5,23,0,0,312,315,
		1,0,0,0,313,315,3,34,17,0,314,294,1,0,0,0,314,302,1,0,0,0,314,303,1,0,
		0,0,314,304,1,0,0,0,314,305,1,0,0,0,314,306,1,0,0,0,314,307,1,0,0,0,314,
		309,1,0,0,0,314,313,1,0,0,0,315,33,1,0,0,0,316,317,5,37,0,0,317,322,3,
		28,14,0,318,319,5,21,0,0,319,321,3,28,14,0,320,318,1,0,0,0,321,324,1,0,
		0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,
		326,5,38,0,0,326,35,1,0,0,0,327,336,3,44,22,0,328,329,5,33,0,0,329,335,
		3,44,22,0,330,331,5,24,0,0,331,332,3,28,14,0,332,333,5,25,0,0,333,335,
		1,0,0,0,334,328,1,0,0,0,334,330,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,
		0,336,337,1,0,0,0,337,37,1,0,0,0,338,336,1,0,0,0,339,340,7,0,0,0,340,39,
		1,0,0,0,341,342,7,1,0,0,342,41,1,0,0,0,343,344,7,2,0,0,344,43,1,0,0,0,
		345,346,5,49,0,0,346,45,1,0,0,0,347,348,5,14,0,0,348,349,3,20,10,0,349,
		353,5,44,0,0,350,352,3,14,7,0,351,350,1,0,0,0,352,355,1,0,0,0,353,351,
		1,0,0,0,353,354,1,0,0,0,354,47,1,0,0,0,355,353,1,0,0,0,356,357,5,12,0,
		0,357,362,3,44,22,0,358,359,5,33,0,0,359,361,3,44,22,0,360,358,1,0,0,0,
		361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,365,1,0,0,0,364,362,
		1,0,0,0,365,366,5,32,0,0,366,49,1,0,0,0,39,53,62,64,75,85,87,94,99,112,
		124,126,132,139,144,155,162,166,181,195,208,217,226,231,233,243,251,259,
		271,274,282,291,297,300,314,322,334,336,353,362
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace generated.parser
