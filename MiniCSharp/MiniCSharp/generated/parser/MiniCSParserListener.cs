//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/n4hum/OneDrive/Escritorio/Codigo-MainDir/C#/ProyectoCompi/MiniCSharp/MiniCSharp/MiniCSParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated.parser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MiniCSParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IMiniCSParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] MiniCSParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] MiniCSParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDecl([NotNull] MiniCSParser.VarDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDecl([NotNull] MiniCSParser.VarDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassDecl([NotNull] MiniCSParser.ClassDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassDecl([NotNull] MiniCSParser.ClassDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodDecl([NotNull] MiniCSParser.MethodDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodDecl([NotNull] MiniCSParser.MethodDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.formPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormPars([NotNull] MiniCSParser.FormParsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.formPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormPars([NotNull] MiniCSParser.FormParsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>simpletype</c>
	/// labeled alternative in <see cref="MiniCSParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpletype([NotNull] MiniCSParser.SimpletypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>simpletype</c>
	/// labeled alternative in <see cref="MiniCSParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpletype([NotNull] MiniCSParser.SimpletypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>listOfSimple</c>
	/// labeled alternative in <see cref="MiniCSParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListOfSimple([NotNull] MiniCSParser.ListOfSimpleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>listOfSimple</c>
	/// labeled alternative in <see cref="MiniCSParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListOfSimple([NotNull] MiniCSParser.ListOfSimpleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>userTypeOrArray</c>
	/// labeled alternative in <see cref="MiniCSParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUserTypeOrArray([NotNull] MiniCSParser.UserTypeOrArrayContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>userTypeOrArray</c>
	/// labeled alternative in <see cref="MiniCSParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUserTypeOrArray([NotNull] MiniCSParser.UserTypeOrArrayContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>intType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntType([NotNull] MiniCSParser.IntTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>intType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntType([NotNull] MiniCSParser.IntTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>charType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharType([NotNull] MiniCSParser.CharTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>charType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharType([NotNull] MiniCSParser.CharTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>boolType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolType([NotNull] MiniCSParser.BoolTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>boolType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolType([NotNull] MiniCSParser.BoolTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringType([NotNull] MiniCSParser.StringTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringType([NotNull] MiniCSParser.StringTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assignStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignStatement([NotNull] MiniCSParser.AssignStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignStatement([NotNull] MiniCSParser.AssignStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] MiniCSParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] MiniCSParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>forStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] MiniCSParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>forStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] MiniCSParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] MiniCSParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] MiniCSParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>breakStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStatement([NotNull] MiniCSParser.BreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>breakStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStatement([NotNull] MiniCSParser.BreakStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] MiniCSParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] MiniCSParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>readStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadStatement([NotNull] MiniCSParser.ReadStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>readStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadStatement([NotNull] MiniCSParser.ReadStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>writeStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteStatement([NotNull] MiniCSParser.WriteStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>writeStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteStatement([NotNull] MiniCSParser.WriteStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>switchStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatement([NotNull] MiniCSParser.SwitchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>switchStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatement([NotNull] MiniCSParser.SwitchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>blackStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlackStatement([NotNull] MiniCSParser.BlackStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>blackStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlackStatement([NotNull] MiniCSParser.BlackStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyStatement([NotNull] MiniCSParser.EmptyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyStatement([NotNull] MiniCSParser.EmptyStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>initEmpty</c>
	/// labeled alternative in <see cref="MiniCSParser.forInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitEmpty([NotNull] MiniCSParser.InitEmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>initEmpty</c>
	/// labeled alternative in <see cref="MiniCSParser.forInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitEmpty([NotNull] MiniCSParser.InitEmptyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>initAssign</c>
	/// labeled alternative in <see cref="MiniCSParser.forInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitAssign([NotNull] MiniCSParser.InitAssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>initAssign</c>
	/// labeled alternative in <see cref="MiniCSParser.forInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitAssign([NotNull] MiniCSParser.InitAssignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>updateEmpty</c>
	/// labeled alternative in <see cref="MiniCSParser.forUpdate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUpdateEmpty([NotNull] MiniCSParser.UpdateEmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>updateEmpty</c>
	/// labeled alternative in <see cref="MiniCSParser.forUpdate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUpdateEmpty([NotNull] MiniCSParser.UpdateEmptyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>updateAssign</c>
	/// labeled alternative in <see cref="MiniCSParser.forUpdate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUpdateAssign([NotNull] MiniCSParser.UpdateAssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>updateAssign</c>
	/// labeled alternative in <see cref="MiniCSParser.forUpdate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUpdateAssign([NotNull] MiniCSParser.UpdateAssignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] MiniCSParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] MiniCSParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.actPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterActPars([NotNull] MiniCSParser.ActParsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.actPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitActPars([NotNull] MiniCSParser.ActParsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondition([NotNull] MiniCSParser.ConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondition([NotNull] MiniCSParser.ConditionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.condTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondTerm([NotNull] MiniCSParser.CondTermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.condTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondTerm([NotNull] MiniCSParser.CondTermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.condFact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondFact([NotNull] MiniCSParser.CondFactContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.condFact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondFact([NotNull] MiniCSParser.CondFactContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.cast"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCast([NotNull] MiniCSParser.CastContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.cast"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCast([NotNull] MiniCSParser.CastContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] MiniCSParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] MiniCSParser.ExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm([NotNull] MiniCSParser.TermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm([NotNull] MiniCSParser.TermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactor([NotNull] MiniCSParser.FactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactor([NotNull] MiniCSParser.FactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.listLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListLiteral([NotNull] MiniCSParser.ListLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.listLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListLiteral([NotNull] MiniCSParser.ListLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.designator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDesignator([NotNull] MiniCSParser.DesignatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.designator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDesignator([NotNull] MiniCSParser.DesignatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelop([NotNull] MiniCSParser.RelopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelop([NotNull] MiniCSParser.RelopContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.addop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddop([NotNull] MiniCSParser.AddopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.addop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddop([NotNull] MiniCSParser.AddopContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulop([NotNull] MiniCSParser.MulopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulop([NotNull] MiniCSParser.MulopContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.ident"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdent([NotNull] MiniCSParser.IdentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.ident"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdent([NotNull] MiniCSParser.IdentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.caseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseBlock([NotNull] MiniCSParser.CaseBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.caseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseBlock([NotNull] MiniCSParser.CaseBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.usingDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUsingDecl([NotNull] MiniCSParser.UsingDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.usingDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUsingDecl([NotNull] MiniCSParser.UsingDeclContext context);
}
} // namespace generated.parser
