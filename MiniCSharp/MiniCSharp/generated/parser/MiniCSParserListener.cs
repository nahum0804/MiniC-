//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/n4hum/OneDrive/Escritorio/Codigo-MainDir/C#/ProyectoCompi/MiniCSharp/MiniCSharp/MiniCSParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated.parser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MiniCSParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IMiniCSParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] MiniCSParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] MiniCSParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDecl([NotNull] MiniCSParser.VarDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDecl([NotNull] MiniCSParser.VarDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassDecl([NotNull] MiniCSParser.ClassDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassDecl([NotNull] MiniCSParser.ClassDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodDecl([NotNull] MiniCSParser.MethodDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodDecl([NotNull] MiniCSParser.MethodDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.formPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormPars([NotNull] MiniCSParser.FormParsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.formPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormPars([NotNull] MiniCSParser.FormParsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] MiniCSParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] MiniCSParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] MiniCSParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] MiniCSParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] MiniCSParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] MiniCSParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.actPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterActPars([NotNull] MiniCSParser.ActParsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.actPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitActPars([NotNull] MiniCSParser.ActParsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondition([NotNull] MiniCSParser.ConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondition([NotNull] MiniCSParser.ConditionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.condTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondTerm([NotNull] MiniCSParser.CondTermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.condTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondTerm([NotNull] MiniCSParser.CondTermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.condFact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondFact([NotNull] MiniCSParser.CondFactContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.condFact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondFact([NotNull] MiniCSParser.CondFactContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.cast"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCast([NotNull] MiniCSParser.CastContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.cast"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCast([NotNull] MiniCSParser.CastContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] MiniCSParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] MiniCSParser.ExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm([NotNull] MiniCSParser.TermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm([NotNull] MiniCSParser.TermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactor([NotNull] MiniCSParser.FactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactor([NotNull] MiniCSParser.FactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.designator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDesignator([NotNull] MiniCSParser.DesignatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.designator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDesignator([NotNull] MiniCSParser.DesignatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelop([NotNull] MiniCSParser.RelopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelop([NotNull] MiniCSParser.RelopContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.addop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddop([NotNull] MiniCSParser.AddopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.addop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddop([NotNull] MiniCSParser.AddopContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulop([NotNull] MiniCSParser.MulopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulop([NotNull] MiniCSParser.MulopContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.ident"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdent([NotNull] MiniCSParser.IdentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.ident"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdent([NotNull] MiniCSParser.IdentContext context);
}
} // namespace generated.parser
