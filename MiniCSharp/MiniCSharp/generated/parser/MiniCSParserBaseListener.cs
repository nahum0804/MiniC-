//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/n4hum/OneDrive/Escritorio/Codigo-MainDir/C#/ProyectoCompi/MiniCSharp/MiniCSharp/MiniCSParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated.parser {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMiniCSParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class MiniCSParserBaseListener : IMiniCSParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] MiniCSParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] MiniCSParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.varDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVarDecl([NotNull] MiniCSParser.VarDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.varDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVarDecl([NotNull] MiniCSParser.VarDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.classDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassDecl([NotNull] MiniCSParser.ClassDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.classDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassDecl([NotNull] MiniCSParser.ClassDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.methodDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodDecl([NotNull] MiniCSParser.MethodDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.methodDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodDecl([NotNull] MiniCSParser.MethodDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.formPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormPars([NotNull] MiniCSParser.FormParsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.formPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormPars([NotNull] MiniCSParser.FormParsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>simpletype</c>
	/// labeled alternative in <see cref="MiniCSParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpletype([NotNull] MiniCSParser.SimpletypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>simpletype</c>
	/// labeled alternative in <see cref="MiniCSParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpletype([NotNull] MiniCSParser.SimpletypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>listOfSimple</c>
	/// labeled alternative in <see cref="MiniCSParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterListOfSimple([NotNull] MiniCSParser.ListOfSimpleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>listOfSimple</c>
	/// labeled alternative in <see cref="MiniCSParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitListOfSimple([NotNull] MiniCSParser.ListOfSimpleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>userTypeOrArray</c>
	/// labeled alternative in <see cref="MiniCSParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUserTypeOrArray([NotNull] MiniCSParser.UserTypeOrArrayContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>userTypeOrArray</c>
	/// labeled alternative in <see cref="MiniCSParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUserTypeOrArray([NotNull] MiniCSParser.UserTypeOrArrayContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>intType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntType([NotNull] MiniCSParser.IntTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>intType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntType([NotNull] MiniCSParser.IntTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>charType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCharType([NotNull] MiniCSParser.CharTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>charType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCharType([NotNull] MiniCSParser.CharTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>boolType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolType([NotNull] MiniCSParser.BoolTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>boolType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolType([NotNull] MiniCSParser.BoolTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringType([NotNull] MiniCSParser.StringTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringType</c>
	/// labeled alternative in <see cref="MiniCSParser.simpleType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringType([NotNull] MiniCSParser.StringTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assignStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignStatement([NotNull] MiniCSParser.AssignStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assignStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignStatement([NotNull] MiniCSParser.AssignStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] MiniCSParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] MiniCSParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>forStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStatement([NotNull] MiniCSParser.ForStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>forStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStatement([NotNull] MiniCSParser.ForStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] MiniCSParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] MiniCSParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>breakStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBreakStatement([NotNull] MiniCSParser.BreakStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>breakStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBreakStatement([NotNull] MiniCSParser.BreakStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] MiniCSParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] MiniCSParser.ReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>readStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReadStatement([NotNull] MiniCSParser.ReadStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>readStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReadStatement([NotNull] MiniCSParser.ReadStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>writeStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWriteStatement([NotNull] MiniCSParser.WriteStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>writeStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWriteStatement([NotNull] MiniCSParser.WriteStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>switchStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSwitchStatement([NotNull] MiniCSParser.SwitchStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>switchStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSwitchStatement([NotNull] MiniCSParser.SwitchStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>blackStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlackStatement([NotNull] MiniCSParser.BlackStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>blackStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlackStatement([NotNull] MiniCSParser.BlackStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmptyStatement([NotNull] MiniCSParser.EmptyStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="MiniCSParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmptyStatement([NotNull] MiniCSParser.EmptyStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>initEmpty</c>
	/// labeled alternative in <see cref="MiniCSParser.forInit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInitEmpty([NotNull] MiniCSParser.InitEmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>initEmpty</c>
	/// labeled alternative in <see cref="MiniCSParser.forInit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInitEmpty([NotNull] MiniCSParser.InitEmptyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>initAssign</c>
	/// labeled alternative in <see cref="MiniCSParser.forInit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInitAssign([NotNull] MiniCSParser.InitAssignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>initAssign</c>
	/// labeled alternative in <see cref="MiniCSParser.forInit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInitAssign([NotNull] MiniCSParser.InitAssignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>updateEmpty</c>
	/// labeled alternative in <see cref="MiniCSParser.forUpdate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUpdateEmpty([NotNull] MiniCSParser.UpdateEmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>updateEmpty</c>
	/// labeled alternative in <see cref="MiniCSParser.forUpdate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUpdateEmpty([NotNull] MiniCSParser.UpdateEmptyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>updateAssign</c>
	/// labeled alternative in <see cref="MiniCSParser.forUpdate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUpdateAssign([NotNull] MiniCSParser.UpdateAssignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>updateAssign</c>
	/// labeled alternative in <see cref="MiniCSParser.forUpdate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUpdateAssign([NotNull] MiniCSParser.UpdateAssignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] MiniCSParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] MiniCSParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.actPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterActPars([NotNull] MiniCSParser.ActParsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.actPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitActPars([NotNull] MiniCSParser.ActParsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondition([NotNull] MiniCSParser.ConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondition([NotNull] MiniCSParser.ConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.condTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondTerm([NotNull] MiniCSParser.CondTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.condTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondTerm([NotNull] MiniCSParser.CondTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.condFact"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondFact([NotNull] MiniCSParser.CondFactContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.condFact"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondFact([NotNull] MiniCSParser.CondFactContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.cast"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCast([NotNull] MiniCSParser.CastContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.cast"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCast([NotNull] MiniCSParser.CastContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr([NotNull] MiniCSParser.ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr([NotNull] MiniCSParser.ExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm([NotNull] MiniCSParser.TermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm([NotNull] MiniCSParser.TermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactor([NotNull] MiniCSParser.FactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactor([NotNull] MiniCSParser.FactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.listLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterListLiteral([NotNull] MiniCSParser.ListLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.listLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitListLiteral([NotNull] MiniCSParser.ListLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.designator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDesignator([NotNull] MiniCSParser.DesignatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.designator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDesignator([NotNull] MiniCSParser.DesignatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.relop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelop([NotNull] MiniCSParser.RelopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.relop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelop([NotNull] MiniCSParser.RelopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.addop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddop([NotNull] MiniCSParser.AddopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.addop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddop([NotNull] MiniCSParser.AddopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.mulop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMulop([NotNull] MiniCSParser.MulopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.mulop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMulop([NotNull] MiniCSParser.MulopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.ident"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdent([NotNull] MiniCSParser.IdentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.ident"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdent([NotNull] MiniCSParser.IdentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.caseBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaseBlock([NotNull] MiniCSParser.CaseBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.caseBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaseBlock([NotNull] MiniCSParser.CaseBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSParser.usingDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUsingDecl([NotNull] MiniCSParser.UsingDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSParser.usingDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUsingDecl([NotNull] MiniCSParser.UsingDeclContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace generated.parser
