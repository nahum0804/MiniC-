//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\n4hum\OneDrive\Escritorio\Codigo-MainDir\C#\ProyectoCompi\MiniCSharp\MiniCSharp\MiniCSParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniCSharp {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiniCSParser : Parser {
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, WHILE=5, FOR=6, RETURN=7, BREAK=8, READ=9, 
		WRITE=10, NEW=11, TRUE=12, FALSE=13, BL=14, BR=15, COMMA=16, LEFTP=17, 
		RIGHTP=18, SBL=19, SBR=20, ASSIGN=21, ADD=22, SUB=23, OR=24, AND=25, BAR=26, 
		SEMICOLON=27, DOT=28, PLUS=29, EQEQ=30, NOTEQ=31, LESS=32, GREATER=33, 
		LESSEQ=34, GREATEREQ=35, MULT=36, DIV=37, MOD=38, NUMLIT=39, FLOATLIT=40, 
		CHARLIT=41, STRINGLIT=42, ID=43, LINE_COMMENT=44, WS=45;
	public const int
		RULE_program = 0, RULE_varDecl = 1, RULE_classDecl = 2, RULE_methodDecl = 3, 
		RULE_formPars = 4, RULE_type = 5, RULE_statement = 6, RULE_block = 7, 
		RULE_actPars = 8, RULE_condition = 9, RULE_condTerm = 10, RULE_condFact = 11, 
		RULE_cast = 12, RULE_expr = 13, RULE_term = 14, RULE_factor = 15, RULE_designator = 16, 
		RULE_relop = 17, RULE_addop = 18, RULE_mulop = 19, RULE_ident = 20;
	public static readonly string[] ruleNames = {
		"program", "varDecl", "classDecl", "methodDecl", "formPars", "type", "statement", 
		"block", "actPars", "condition", "condTerm", "condFact", "cast", "expr", 
		"term", "factor", "designator", "relop", "addop", "mulop", "ident"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'while'", "'for'", "'return'", 
		"'break'", "'read'", "'write'", "'new'", "'true'", "'false'", "'{'", "'}'", 
		"','", "'('", "')'", "'['", "']'", "'='", "'++'", "'--'", "'||'", "'&&'", 
		"'-'", "';'", "'.'", "'+'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", 
		"'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "WHILE", "FOR", "RETURN", "BREAK", 
		"READ", "WRITE", "NEW", "TRUE", "FALSE", "BL", "BR", "COMMA", "LEFTP", 
		"RIGHTP", "SBL", "SBR", "ASSIGN", "ADD", "SUB", "OR", "AND", "BAR", "SEMICOLON", 
		"DOT", "PLUS", "EQEQ", "NOTEQ", "LESS", "GREATER", "LESSEQ", "GREATEREQ", 
		"MULT", "DIV", "MOD", "NUMLIT", "FLOATLIT", "CHARLIT", "STRINGLIT", "ID", 
		"LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MiniCSParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(MiniCSParser.CLASS, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ITerminalNode BL() { return GetToken(MiniCSParser.BL, 0); }
		public ITerminalNode BR() { return GetToken(MiniCSParser.BR, 0); }
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(CLASS);
			State = 43; ident();
			State = 44; Match(BL);
			State = 50;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << VOID) | (1L << ID))) != 0)) {
				{
				State = 48;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					State = 45; varDecl();
					}
					break;

				case 2:
					{
					State = 46; classDecl();
					}
					break;

				case 3:
					{
					State = 47; methodDecl();
					}
					break;
				}
				}
				State = 52;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 53; Match(BR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public ITerminalNode SEMICOLON() { return GetToken(MiniCSParser.SEMICOLON, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(MiniCSParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSParser.COMMA, i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; type();
			State = 56; ident();
			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 57; Match(COMMA);
				State = 58; ident();
				}
				}
				State = 63;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 64; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(MiniCSParser.CLASS, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ITerminalNode BL() { return GetToken(MiniCSParser.BL, 0); }
		public ITerminalNode BR() { return GetToken(MiniCSParser.BR, 0); }
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(CLASS);
			State = 67; ident();
			State = 68; Match(BL);
			State = 72;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ID) {
				{
				{
				State = 69; varDecl();
				}
				}
				State = 74;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 75; Match(BR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ITerminalNode LEFTP() { return GetToken(MiniCSParser.LEFTP, 0); }
		public ITerminalNode RIGHTP() { return GetToken(MiniCSParser.RIGHTP, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(MiniCSParser.VOID, 0); }
		public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				{
				State = 77; type();
				}
				break;
			case VOID:
				{
				State = 78; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 81; ident();
			State = 82; Match(LEFTP);
			State = 84;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ID) {
				{
				State = 83; formPars();
				}
			}

			State = 86; Match(RIGHTP);
			State = 87; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniCSParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSParser.COMMA, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterFormPars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitFormPars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; type();
			State = 90; ident();
			State = 97;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 91; Match(COMMA);
				State = 92; type();
				State = 93; ident();
				}
				}
				State = 99;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ITerminalNode SBL() { return GetToken(MiniCSParser.SBL, 0); }
		public ITerminalNode SBR() { return GetToken(MiniCSParser.SBR, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; ident();
			State = 103;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SBL) {
				{
				State = 101; Match(SBL);
				State = 102; Match(SBR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(MiniCSParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniCSParser.SEMICOLON, i);
		}
		public ITerminalNode ASSIGN() { return GetToken(MiniCSParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode LEFTP() { return GetToken(MiniCSParser.LEFTP, 0); }
		public ITerminalNode RIGHTP() { return GetToken(MiniCSParser.RIGHTP, 0); }
		public ITerminalNode ADD() { return GetToken(MiniCSParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(MiniCSParser.SUB, 0); }
		public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public ITerminalNode IF() { return GetToken(MiniCSParser.IF, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MiniCSParser.ELSE, 0); }
		public ITerminalNode FOR() { return GetToken(MiniCSParser.FOR, 0); }
		public ITerminalNode WHILE() { return GetToken(MiniCSParser.WHILE, 0); }
		public ITerminalNode BREAK() { return GetToken(MiniCSParser.BREAK, 0); }
		public ITerminalNode RETURN() { return GetToken(MiniCSParser.RETURN, 0); }
		public ITerminalNode READ() { return GetToken(MiniCSParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(MiniCSParser.WRITE, 0); }
		public ITerminalNode COMMA() { return GetToken(MiniCSParser.COMMA, 0); }
		public ITerminalNode NUMLIT() { return GetToken(MiniCSParser.NUMLIT, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_statement);
		int _la;
		try {
			State = 173;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; designator();
				State = 115;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ASSIGN:
					{
					State = 106; Match(ASSIGN);
					State = 107; expr();
					}
					break;
				case LEFTP:
					{
					State = 108; Match(LEFTP);
					State = 110;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << LEFTP) | (1L << BAR) | (1L << NUMLIT) | (1L << CHARLIT) | (1L << STRINGLIT) | (1L << ID))) != 0)) {
						{
						State = 109; actPars();
						}
					}

					State = 112; Match(RIGHTP);
					}
					break;
				case ADD:
					{
					State = 113; Match(ADD);
					}
					break;
				case SUB:
					{
					State = 114; Match(SUB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 117; Match(SEMICOLON);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119; Match(IF);
				State = 120; Match(LEFTP);
				State = 121; condition();
				State = 122; Match(RIGHTP);
				State = 123; statement();
				State = 126;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					State = 124; Match(ELSE);
					State = 125; statement();
					}
					break;
				}
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 128; Match(FOR);
				State = 129; Match(LEFTP);
				State = 130; expr();
				State = 131; Match(SEMICOLON);
				State = 133;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << LEFTP) | (1L << BAR) | (1L << NUMLIT) | (1L << CHARLIT) | (1L << STRINGLIT) | (1L << ID))) != 0)) {
					{
					State = 132; condition();
					}
				}

				State = 135; Match(SEMICOLON);
				State = 137;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << RETURN) | (1L << BREAK) | (1L << READ) | (1L << WRITE) | (1L << BL) | (1L << SEMICOLON) | (1L << ID))) != 0)) {
					{
					State = 136; statement();
					}
				}

				State = 139; Match(RIGHTP);
				State = 140; statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 142; Match(WHILE);
				State = 143; Match(LEFTP);
				State = 144; condition();
				State = 145; Match(RIGHTP);
				State = 146; statement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 148; Match(BREAK);
				State = 149; Match(SEMICOLON);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 150; Match(RETURN);
				State = 152;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << LEFTP) | (1L << BAR) | (1L << NUMLIT) | (1L << CHARLIT) | (1L << STRINGLIT) | (1L << ID))) != 0)) {
					{
					State = 151; expr();
					}
				}

				State = 154; Match(SEMICOLON);
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 155; Match(READ);
				State = 156; Match(LEFTP);
				State = 157; designator();
				State = 158; Match(RIGHTP);
				State = 159; Match(SEMICOLON);
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 161; Match(WRITE);
				State = 162; Match(LEFTP);
				State = 163; expr();
				State = 166;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 164; Match(COMMA);
					State = 165; Match(NUMLIT);
					}
				}

				State = 168; Match(RIGHTP);
				State = 169; Match(SEMICOLON);
				}
				break;
			case BL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 171; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 10);
				{
				State = 172; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode BL() { return GetToken(MiniCSParser.BL, 0); }
		public ITerminalNode BR() { return GetToken(MiniCSParser.BR, 0); }
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(BL);
			State = 180;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << RETURN) | (1L << BREAK) | (1L << READ) | (1L << WRITE) | (1L << BL) | (1L << SEMICOLON) | (1L << ID))) != 0)) {
				{
				State = 178;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					State = 176; varDecl();
					}
					break;

				case 2:
					{
					State = 177; statement();
					}
					break;
				}
				}
				State = 182;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 183; Match(BR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniCSParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSParser.COMMA, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterActPars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitActPars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; expr();
			State = 190;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 186; Match(COMMA);
				State = 187; expr();
				}
				}
				State = 192;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(MiniCSParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(MiniCSParser.OR, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; condTerm();
			State = 198;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OR) {
				{
				{
				State = 194; Match(OR);
				State = 195; condTerm();
				}
				}
				State = 200;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(MiniCSParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(MiniCSParser.AND, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterCondTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitCondTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; condFact();
			State = 206;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AND) {
				{
				{
				State = 202; Match(AND);
				State = 203; condFact();
				}
				}
				State = 208;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterCondFact(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitCondFact(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; expr();
			State = 210; relop();
			State = 211; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		public ITerminalNode LEFTP() { return GetToken(MiniCSParser.LEFTP, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RIGHTP() { return GetToken(MiniCSParser.RIGHTP, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitCast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(LEFTP);
			State = 214; type();
			State = 215; Match(RIGHTP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode BAR() { return GetToken(MiniCSParser.BAR, 0); }
		public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==BAR) {
				{
				State = 217; Match(BAR);
				}
			}

			State = 221;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 220; cast();
				}
				break;
			}
			State = 223; term();
			State = 229;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==BAR || _la==PLUS) {
				{
				{
				State = 224; addop();
				State = 225; term();
				}
				}
				State = 231;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; factor();
			State = 238;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULT) | (1L << DIV) | (1L << MOD))) != 0)) {
				{
				{
				State = 233; mulop();
				State = 234; factor();
				}
				}
				State = 240;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode LEFTP() { return GetToken(MiniCSParser.LEFTP, 0); }
		public ITerminalNode RIGHTP() { return GetToken(MiniCSParser.RIGHTP, 0); }
		public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public ITerminalNode NUMLIT() { return GetToken(MiniCSParser.NUMLIT, 0); }
		public ITerminalNode CHARLIT() { return GetToken(MiniCSParser.CHARLIT, 0); }
		public ITerminalNode STRINGLIT() { return GetToken(MiniCSParser.STRINGLIT, 0); }
		public ITerminalNode TRUE() { return GetToken(MiniCSParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(MiniCSParser.FALSE, 0); }
		public ITerminalNode NEW() { return GetToken(MiniCSParser.NEW, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_factor);
		int _la;
		try {
			State = 260;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241; designator();
				State = 247;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LEFTP) {
					{
					State = 242; Match(LEFTP);
					State = 244;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << LEFTP) | (1L << BAR) | (1L << NUMLIT) | (1L << CHARLIT) | (1L << STRINGLIT) | (1L << ID))) != 0)) {
						{
						State = 243; actPars();
						}
					}

					State = 246; Match(RIGHTP);
					}
				}

				}
				break;
			case NUMLIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249; Match(NUMLIT);
				}
				break;
			case CHARLIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 250; Match(CHARLIT);
				}
				break;
			case STRINGLIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 251; Match(STRINGLIT);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 252; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 253; Match(FALSE);
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 7);
				{
				State = 254; Match(NEW);
				State = 255; ident();
				}
				break;
			case LEFTP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 256; Match(LEFTP);
				State = 257; expr();
				State = 258; Match(RIGHTP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(MiniCSParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(MiniCSParser.DOT, i);
		}
		public ITerminalNode[] SBL() { return GetTokens(MiniCSParser.SBL); }
		public ITerminalNode SBL(int i) {
			return GetToken(MiniCSParser.SBL, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] SBR() { return GetTokens(MiniCSParser.SBR); }
		public ITerminalNode SBR(int i) {
			return GetToken(MiniCSParser.SBR, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; ident();
			State = 271;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SBL || _la==DOT) {
				{
				State = 269;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case DOT:
					{
					State = 263; Match(DOT);
					State = 264; ident();
					}
					break;
				case SBL:
					{
					State = 265; Match(SBL);
					State = 266; expr();
					State = 267; Match(SBR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 273;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		public ITerminalNode EQEQ() { return GetToken(MiniCSParser.EQEQ, 0); }
		public ITerminalNode NOTEQ() { return GetToken(MiniCSParser.NOTEQ, 0); }
		public ITerminalNode GREATER() { return GetToken(MiniCSParser.GREATER, 0); }
		public ITerminalNode GREATEREQ() { return GetToken(MiniCSParser.GREATEREQ, 0); }
		public ITerminalNode LESS() { return GetToken(MiniCSParser.LESS, 0); }
		public ITerminalNode LESSEQ() { return GetToken(MiniCSParser.LESSEQ, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQEQ) | (1L << NOTEQ) | (1L << LESS) | (1L << GREATER) | (1L << LESSEQ) | (1L << GREATEREQ))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(MiniCSParser.PLUS, 0); }
		public ITerminalNode BAR() { return GetToken(MiniCSParser.BAR, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterAddop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitAddop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_la = _input.La(1);
			if ( !(_la==BAR || _la==PLUS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(MiniCSParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(MiniCSParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(MiniCSParser.MOD, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterMulop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitMulop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULT) | (1L << DIV) | (1L << MOD))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MiniCSParser.ID, 0); }
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSParserListener typedListener = listener as IMiniCSParserListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSParserVisitor<TResult> typedVisitor = visitor as IMiniCSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_ident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3/\x11D\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x33\n\x2\f\x2\xE"+
		"\x2\x36\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\a\x3>\n\x3\f\x3\xE\x3"+
		"\x41\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\a\x4I\n\x4\f\x4\xE\x4L\v"+
		"\x4\x3\x4\x3\x4\x3\x5\x3\x5\x5\x5R\n\x5\x3\x5\x3\x5\x3\x5\x5\x5W\n\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x62\n\x6\f"+
		"\x6\xE\x6\x65\v\x6\x3\a\x3\a\x3\a\x5\aj\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x5"+
		"\bq\n\b\x3\b\x3\b\x3\b\x5\bv\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x5\b\x81\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x88\n\b\x3\b\x3\b\x5"+
		"\b\x8C\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x5\b\x9B\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x5\b\xA9\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xB0\n\b\x3\t\x3\t\x3"+
		"\t\a\t\xB5\n\t\f\t\xE\t\xB8\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\a\n\xBF\n\n\f"+
		"\n\xE\n\xC2\v\n\x3\v\x3\v\x3\v\a\v\xC7\n\v\f\v\xE\v\xCA\v\v\x3\f\x3\f"+
		"\x3\f\a\f\xCF\n\f\f\f\xE\f\xD2\v\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xF\x5\xF\xDD\n\xF\x3\xF\x5\xF\xE0\n\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\a\xF\xE6\n\xF\f\xF\xE\xF\xE9\v\xF\x3\x10\x3\x10\x3\x10\x3\x10\a"+
		"\x10\xEF\n\x10\f\x10\xE\x10\xF2\v\x10\x3\x11\x3\x11\x3\x11\x5\x11\xF7"+
		"\n\x11\x3\x11\x5\x11\xFA\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x107\n\x11\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x110\n\x12\f\x12\xE\x12\x113\v"+
		"\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x2"+
		"\x2\x2\x17\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2\x2\x5\x3"+
		"\x2 %\x4\x2\x1C\x1C\x1F\x1F\x3\x2&(\x136\x2,\x3\x2\x2\x2\x4\x39\x3\x2"+
		"\x2\x2\x6\x44\x3\x2\x2\x2\bQ\x3\x2\x2\x2\n[\x3\x2\x2\x2\f\x66\x3\x2\x2"+
		"\x2\xE\xAF\x3\x2\x2\x2\x10\xB1\x3\x2\x2\x2\x12\xBB\x3\x2\x2\x2\x14\xC3"+
		"\x3\x2\x2\x2\x16\xCB\x3\x2\x2\x2\x18\xD3\x3\x2\x2\x2\x1A\xD7\x3\x2\x2"+
		"\x2\x1C\xDC\x3\x2\x2\x2\x1E\xEA\x3\x2\x2\x2 \x106\x3\x2\x2\x2\"\x108\x3"+
		"\x2\x2\x2$\x114\x3\x2\x2\x2&\x116\x3\x2\x2\x2(\x118\x3\x2\x2\x2*\x11A"+
		"\x3\x2\x2\x2,-\a\x3\x2\x2-.\x5*\x16\x2.\x34\a\x10\x2\x2/\x33\x5\x4\x3"+
		"\x2\x30\x33\x5\x6\x4\x2\x31\x33\x5\b\x5\x2\x32/\x3\x2\x2\x2\x32\x30\x3"+
		"\x2\x2\x2\x32\x31\x3\x2\x2\x2\x33\x36\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2"+
		"\x34\x35\x3\x2\x2\x2\x35\x37\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x37\x38\a"+
		"\x11\x2\x2\x38\x3\x3\x2\x2\x2\x39:\x5\f\a\x2:?\x5*\x16\x2;<\a\x12\x2\x2"+
		"<>\x5*\x16\x2=;\x3\x2\x2\x2>\x41\x3\x2\x2\x2?=\x3\x2\x2\x2?@\x3\x2\x2"+
		"\x2@\x42\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x42\x43\a\x1D\x2\x2\x43\x5\x3\x2"+
		"\x2\x2\x44\x45\a\x3\x2\x2\x45\x46\x5*\x16\x2\x46J\a\x10\x2\x2GI\x5\x4"+
		"\x3\x2HG\x3\x2\x2\x2IL\x3\x2\x2\x2JH\x3\x2\x2\x2JK\x3\x2\x2\x2KM\x3\x2"+
		"\x2\x2LJ\x3\x2\x2\x2MN\a\x11\x2\x2N\a\x3\x2\x2\x2OR\x5\f\a\x2PR\a\x4\x2"+
		"\x2QO\x3\x2\x2\x2QP\x3\x2\x2\x2RS\x3\x2\x2\x2ST\x5*\x16\x2TV\a\x13\x2"+
		"\x2UW\x5\n\x6\x2VU\x3\x2\x2\x2VW\x3\x2\x2\x2WX\x3\x2\x2\x2XY\a\x14\x2"+
		"\x2YZ\x5\x10\t\x2Z\t\x3\x2\x2\x2[\\\x5\f\a\x2\\\x63\x5*\x16\x2]^\a\x12"+
		"\x2\x2^_\x5\f\a\x2_`\x5*\x16\x2`\x62\x3\x2\x2\x2\x61]\x3\x2\x2\x2\x62"+
		"\x65\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\v\x3\x2\x2"+
		"\x2\x65\x63\x3\x2\x2\x2\x66i\x5*\x16\x2gh\a\x15\x2\x2hj\a\x16\x2\x2ig"+
		"\x3\x2\x2\x2ij\x3\x2\x2\x2j\r\x3\x2\x2\x2ku\x5\"\x12\x2lm\a\x17\x2\x2"+
		"mv\x5\x1C\xF\x2np\a\x13\x2\x2oq\x5\x12\n\x2po\x3\x2\x2\x2pq\x3\x2\x2\x2"+
		"qr\x3\x2\x2\x2rv\a\x14\x2\x2sv\a\x18\x2\x2tv\a\x19\x2\x2ul\x3\x2\x2\x2"+
		"un\x3\x2\x2\x2us\x3\x2\x2\x2ut\x3\x2\x2\x2vw\x3\x2\x2\x2wx\a\x1D\x2\x2"+
		"x\xB0\x3\x2\x2\x2yz\a\x5\x2\x2z{\a\x13\x2\x2{|\x5\x14\v\x2|}\a\x14\x2"+
		"\x2}\x80\x5\xE\b\x2~\x7F\a\x6\x2\x2\x7F\x81\x5\xE\b\x2\x80~\x3\x2\x2\x2"+
		"\x80\x81\x3\x2\x2\x2\x81\xB0\x3\x2\x2\x2\x82\x83\a\b\x2\x2\x83\x84\a\x13"+
		"\x2\x2\x84\x85\x5\x1C\xF\x2\x85\x87\a\x1D\x2\x2\x86\x88\x5\x14\v\x2\x87"+
		"\x86\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8B\a\x1D"+
		"\x2\x2\x8A\x8C\x5\xE\b\x2\x8B\x8A\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C"+
		"\x8D\x3\x2\x2\x2\x8D\x8E\a\x14\x2\x2\x8E\x8F\x5\xE\b\x2\x8F\xB0\x3\x2"+
		"\x2\x2\x90\x91\a\a\x2\x2\x91\x92\a\x13\x2\x2\x92\x93\x5\x14\v\x2\x93\x94"+
		"\a\x14\x2\x2\x94\x95\x5\xE\b\x2\x95\xB0\x3\x2\x2\x2\x96\x97\a\n\x2\x2"+
		"\x97\xB0\a\x1D\x2\x2\x98\x9A\a\t\x2\x2\x99\x9B\x5\x1C\xF\x2\x9A\x99\x3"+
		"\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\xB0\a\x1D\x2\x2"+
		"\x9D\x9E\a\v\x2\x2\x9E\x9F\a\x13\x2\x2\x9F\xA0\x5\"\x12\x2\xA0\xA1\a\x14"+
		"\x2\x2\xA1\xA2\a\x1D\x2\x2\xA2\xB0\x3\x2\x2\x2\xA3\xA4\a\f\x2\x2\xA4\xA5"+
		"\a\x13\x2\x2\xA5\xA8\x5\x1C\xF\x2\xA6\xA7\a\x12\x2\x2\xA7\xA9\a)\x2\x2"+
		"\xA8\xA6\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xAB\a"+
		"\x14\x2\x2\xAB\xAC\a\x1D\x2\x2\xAC\xB0\x3\x2\x2\x2\xAD\xB0\x5\x10\t\x2"+
		"\xAE\xB0\a\x1D\x2\x2\xAFk\x3\x2\x2\x2\xAFy\x3\x2\x2\x2\xAF\x82\x3\x2\x2"+
		"\x2\xAF\x90\x3\x2\x2\x2\xAF\x96\x3\x2\x2\x2\xAF\x98\x3\x2\x2\x2\xAF\x9D"+
		"\x3\x2\x2\x2\xAF\xA3\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF\xAE\x3\x2\x2"+
		"\x2\xB0\xF\x3\x2\x2\x2\xB1\xB6\a\x10\x2\x2\xB2\xB5\x5\x4\x3\x2\xB3\xB5"+
		"\x5\xE\b\x2\xB4\xB2\x3\x2\x2\x2\xB4\xB3\x3\x2\x2\x2\xB5\xB8\x3\x2\x2\x2"+
		"\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB9\x3\x2\x2\x2\xB8\xB6\x3"+
		"\x2\x2\x2\xB9\xBA\a\x11\x2\x2\xBA\x11\x3\x2\x2\x2\xBB\xC0\x5\x1C\xF\x2"+
		"\xBC\xBD\a\x12\x2\x2\xBD\xBF\x5\x1C\xF\x2\xBE\xBC\x3\x2\x2\x2\xBF\xC2"+
		"\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\x13\x3\x2\x2"+
		"\x2\xC2\xC0\x3\x2\x2\x2\xC3\xC8\x5\x16\f\x2\xC4\xC5\a\x1A\x2\x2\xC5\xC7"+
		"\x5\x16\f\x2\xC6\xC4\x3\x2\x2\x2\xC7\xCA\x3\x2\x2\x2\xC8\xC6\x3\x2\x2"+
		"\x2\xC8\xC9\x3\x2\x2\x2\xC9\x15\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCB\xD0"+
		"\x5\x18\r\x2\xCC\xCD\a\x1B\x2\x2\xCD\xCF\x5\x18\r\x2\xCE\xCC\x3\x2\x2"+
		"\x2\xCF\xD2\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\x17"+
		"\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD3\xD4\x5\x1C\xF\x2\xD4\xD5\x5$\x13"+
		"\x2\xD5\xD6\x5\x1C\xF\x2\xD6\x19\x3\x2\x2\x2\xD7\xD8\a\x13\x2\x2\xD8\xD9"+
		"\x5\f\a\x2\xD9\xDA\a\x14\x2\x2\xDA\x1B\x3\x2\x2\x2\xDB\xDD\a\x1C\x2\x2"+
		"\xDC\xDB\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xDF\x3\x2\x2\x2\xDE\xE0\x5"+
		"\x1A\xE\x2\xDF\xDE\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2"+
		"\xE1\xE7\x5\x1E\x10\x2\xE2\xE3\x5&\x14\x2\xE3\xE4\x5\x1E\x10\x2\xE4\xE6"+
		"\x3\x2\x2\x2\xE5\xE2\x3\x2\x2\x2\xE6\xE9\x3\x2\x2\x2\xE7\xE5\x3\x2\x2"+
		"\x2\xE7\xE8\x3\x2\x2\x2\xE8\x1D\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xEA\xF0"+
		"\x5 \x11\x2\xEB\xEC\x5(\x15\x2\xEC\xED\x5 \x11\x2\xED\xEF\x3\x2\x2\x2"+
		"\xEE\xEB\x3\x2\x2\x2\xEF\xF2\x3\x2\x2\x2\xF0\xEE\x3\x2\x2\x2\xF0\xF1\x3"+
		"\x2\x2\x2\xF1\x1F\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF3\xF9\x5\"\x12\x2"+
		"\xF4\xF6\a\x13\x2\x2\xF5\xF7\x5\x12\n\x2\xF6\xF5\x3\x2\x2\x2\xF6\xF7\x3"+
		"\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xFA\a\x14\x2\x2\xF9\xF4\x3\x2\x2\x2"+
		"\xF9\xFA\x3\x2\x2\x2\xFA\x107\x3\x2\x2\x2\xFB\x107\a)\x2\x2\xFC\x107\a"+
		"+\x2\x2\xFD\x107\a,\x2\x2\xFE\x107\a\xE\x2\x2\xFF\x107\a\xF\x2\x2\x100"+
		"\x101\a\r\x2\x2\x101\x107\x5*\x16\x2\x102\x103\a\x13\x2\x2\x103\x104\x5"+
		"\x1C\xF\x2\x104\x105\a\x14\x2\x2\x105\x107\x3\x2\x2\x2\x106\xF3\x3\x2"+
		"\x2\x2\x106\xFB\x3\x2\x2\x2\x106\xFC\x3\x2\x2\x2\x106\xFD\x3\x2\x2\x2"+
		"\x106\xFE\x3\x2\x2\x2\x106\xFF\x3\x2\x2\x2\x106\x100\x3\x2\x2\x2\x106"+
		"\x102\x3\x2\x2\x2\x107!\x3\x2\x2\x2\x108\x111\x5*\x16\x2\x109\x10A\a\x1E"+
		"\x2\x2\x10A\x110\x5*\x16\x2\x10B\x10C\a\x15\x2\x2\x10C\x10D\x5\x1C\xF"+
		"\x2\x10D\x10E\a\x16\x2\x2\x10E\x110\x3\x2\x2\x2\x10F\x109\x3\x2\x2\x2"+
		"\x10F\x10B\x3\x2\x2\x2\x110\x113\x3\x2\x2\x2\x111\x10F\x3\x2\x2\x2\x111"+
		"\x112\x3\x2\x2\x2\x112#\x3\x2\x2\x2\x113\x111\x3\x2\x2\x2\x114\x115\t"+
		"\x2\x2\x2\x115%\x3\x2\x2\x2\x116\x117\t\x3\x2\x2\x117\'\x3\x2\x2\x2\x118"+
		"\x119\t\x4\x2\x2\x119)\x3\x2\x2\x2\x11A\x11B\a-\x2\x2\x11B+\x3\x2\x2\x2"+
		" \x32\x34?JQV\x63ipu\x80\x87\x8B\x9A\xA8\xAF\xB4\xB6\xC0\xC8\xD0\xDC\xDF"+
		"\xE7\xF0\xF6\xF9\x106\x10F\x111";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MiniCSharp
